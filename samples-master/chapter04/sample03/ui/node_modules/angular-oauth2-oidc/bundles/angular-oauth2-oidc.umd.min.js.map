{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://angular-oauth2-oidc/types.ts","ng://angular-oauth2-oidc/base64-helper.ts","ng://angular-oauth2-oidc/token-validation/validation-handler.ts","ng://angular-oauth2-oidc/url-helper.service.ts","ng://angular-oauth2-oidc/events.ts","ng://angular-oauth2-oidc/auth.config.ts","ng://angular-oauth2-oidc/encoder.ts","ng://angular-oauth2-oidc/token-validation/hash-handler.ts","ng://angular-oauth2-oidc/oauth-service.ts","ng://angular-oauth2-oidc/oauth-module.config.ts","ng://angular-oauth2-oidc/interceptors/resource-server-error-handler.ts","ng://angular-oauth2-oidc/interceptors/default-oauth.interceptor.ts","ng://angular-oauth2-oidc/token-validation/null-validation-handler.ts","ng://angular-oauth2-oidc/factories.ts","ng://angular-oauth2-oidc/angular-oauth-oidc.module.ts","ng://angular-oauth2-oidc/token-validation/jwks-validation-handler.ts","ng://angular-oauth2-oidc/tokens.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","n","v","op","TypeError","call","pop","push","__values","o","m","__read","ar","error","LoginOptions","preventClearHashAfterLogin","OAuthLogger","OAuthStorage","MemoryStorage","data","Map","getItem","get","removeItem","delete","setItem","set","Injectable","ReceivedTokens","b64DecodeUnicode","str","base64","replace","decodeURIComponent","atob","split","map","charCodeAt","toString","slice","join","base64UrlEncode","btoa","ValidationHandler","AbstractValidationHandler","validateAtHash","params","hashAlg","inferHashAlgorithm","idTokenHeader","calcHash","accessToken","tokenHash","_a","leftMostHalf","substr","atHash","claimsAtHash","idTokenClaims","console","jwtHeader","alg","match","Error","UrlHelperService","getHashFragmentParams","customHashFragment","hash","window","location","indexOf","questionMarkPosition","parseQueryString","queryString","pairs","pair","separatorIndex","escapedKey","escapedValue","type","OAuthSuccessEvent","info","_this","_super","tslib_1.__extends","OAuthEvent","OAuthInfoEvent","OAuthErrorEvent","reason","json","clientId","redirectUri","postLogoutRedirectUri","loginUrl","scope","resource","rngUrl","oidc","requestAccessToken","options","issuer","logoutUrl","clearHashAfterLogin","tokenEndpoint","userinfoEndpoint","responseType","showDebugInformation","silentRefreshRedirectUri","silentRefreshMessagePrefix","silentRefreshShowIFrame","siletRefreshTimeout","silentRefreshTimeout","dummyClientSecret","requireHttps","strictDiscoveryDocumentValidation","jwks","customQueryParams","silentRefreshIFrameName","timeoutFactor","sessionChecksEnabled","sessionCheckIntervall","sessionCheckIFrameUrl","sessionCheckIFrameName","disableAtHashCheck","skipSubjectCheck","useIdTokenHintForSilentRefresh","skipIssuerCheck","nonceStateSeparator","useHttpBasicAuth","waitForTokenInMsec","disablePKCE","openUri","uri","href","assign","WebHttpUrlEncodingCodec","encodeKey","k","encodeURIComponent","encodeValue","decodeKey","decodeValue","HashHandler","DefaultHashHandler","valueToHash","algorithm","encoder","TextEncoder","encode","crypto","subtle","digest","hashArray","toHashString","buffer","byteArray","Uint8Array","byteArray_1","tslib_1.__values","byteArray_1_1","String","fromCharCode","OAuthService","ngZone","http","storage","tokenValidationHandler","config","urlHelper","logger","discoveryDocumentLoaded","state","eventsSubject","Subject","discoveryDocumentLoadedSubject","grantTypesSupported","inImplicitFlow","debug","discoveryDocumentLoaded$","asObservable","events","configure","setStorage","sessionStorage","setupRefreshTimer","AuthConfig","setupSessionCheck","configChanged","restartSessionChecksIfStillLoggedIn","hasValidIdToken","initSessionCheck","restartRefreshTimerIfStillLoggedIn","setupExpirationTimers","pipe","filter","subscribe","setupAutomaticSilentRefresh","listenTo","noPrompt","shouldRunSilentRefresh","tap","debounceTime","refreshInternal","catch","silentRefresh","refreshToken","loadDiscoveryDocumentAndTryLogin","loadDiscoveryDocument","doc","tryLogin","loadDiscoveryDocumentAndLogin","hasValidAccessToken","initCodeFlow","initImplicitFlow","args","_i","validateUrlFromDiscoveryDocument","url","errors","httpsCheck","validateUrlForHttps","issuerCheck","validateUrlAgainstIssuer","lcUrl","toLowerCase","startsWith","assertUrlNotNullAndCorrectProtocol","description","clearAccessTokenTimer","clearIdTokenTimer","tokenReceivedSubscription","unsubscribe","setupAccessTokenTimer","setupIdTokenTimer","expiration","getAccessTokenExpiration","storedAt","getAccessTokenStoredAt","timeout","calcTimeout","runOutsideAngular","accessTokenTimeoutSubscription","of","delay","run","getIdTokenExpiration","getIdTokenStoredAt","idTokenTimeoutSubscription","now","Date","delta","Math","max","_storage","fullUrl","endsWith","validateDiscoveryDocument","authorization_endpoint","end_session_endpoint","grant_types_supported","token_endpoint","userinfo_endpoint","jwksUri","jwks_uri","check_session_iframe","loadJwks","event","discoveryDocument","err","warn","fetchTokenUsingPasswordFlowAndLoadUserProfile","userName","password","headers","HttpHeaders","fetchTokenUsingPasswordFlow","loadUserProfile","getAccessToken","existingClaims","getIdentityClaims","sub","JSON","stringify","HttpParams","header","_b","getOwnPropertyNames","_c","post","tokenResponse","storeAccessTokenResponse","access_token","refresh_token","expires_in","switchMap","id_token","from","processIdToken","storeIdToken","removeSilentRefreshEventListener","silentRefreshPostMessageEventListener","removeEventListener","setupSilentRefreshEventListener","message","processMessageEventMessage","customRedirectUri","addEventListener","claims","getIdToken","document","existingIframe","getElementById","removeChild","silentRefreshSubject","iframe","createElement","id","createLoginUrl","setAttribute","style","appendChild","first","success","race","toPromise","initImplicitFlowInPopup","initLoginFlowInPopup","display","checkForPopupClosedTimer","windowRef","open","calculatePopupFeatures","setInterval","closed","cleanup","clearInterval","listener","close","log","height","width","left","screenLeft","outerWidth","screenTop","outerHeight","expectedPrefix","prefixedMessage","canPerformSessionCheck","getSessionState","setupSessionCheckEventListener","removeSessionCheckEventListener","sessionCheckEventListener","origin","handleSessionUnchanged","handleSessionChange","handleSessionError","stopSessionCheckTimer","waitForSilentRefreshAfterSessionChange","logOut","startSessionCheckTimer","sessionCheckTimer","checkSession","bind","sessionState","contentWindow","postMessage","loginHint","that","createAndSaveNonce","nonce","_h","seperationChar","createChallangeVerifierPairForPKCE","tslib_1.__read","challenge","verifier","_d","keys","_e","_f","_g","initImplicitFlowInternal","additionalState","addParams","resetImplicitFlow","callOnTokenReceivedIfExists","onTokenReceived","tokenParams","idClaims","idToken","expiresIn","grantedScopes","expiresInMilliSeconds","expiresAt","getTime","tryLoginCodeFlow","tryLoginImplicitFlow","charAt","substring","search","parts","getCodePartsFromUrl","code","history","replaceState","name","parseState","nonceInState","userState","handleLoginError","validateNonce","event_1","getTokenFromCode","pkciVerifier","fetchAndProcessToken","disableOAuth2StateCheck","event_2","fallbackAccessTokenExpirationTimeInSec","validationHandler","storeSessionState","idx","savedNonce","idTokenClaimsJson","idTokenExpiresAt","onLoginError","skipNonceCheck","tokenParts","headerJson","padBase64","parse","claimsJson","isArray","aud","every","iat","iss","issuedAtMSec","expiresAtMSec","exp","clockSkewInMSec","clockSkewInSec","validationParams","loadKeys","checkSignature","idTokenHeaderJson","checkAtHash","atHashValid","atHashCheckEnabled","getGrantedScopes","scopes","base64data","getRefreshToken","parseInt","authorizationHeader","noRedirectToLogoutUrl","postLogoutUrl","createNonce","ngOnDestroy","silentRefreshFrame","remove","sessionCheckFrame","unreserved","size","self","bytes","getRandomValues","x","random","validateSignature","initLoginFlow","initCodeFlowInternal","challengeRaw","tslib_1.__param","Optional","NgZone","HttpClient","OAuthNoopResourceServerErrorHandler","handleError","throwError","DefaultOAuthInterceptor","authStorage","oAuthService","errorHandler","moduleConfig","checkUrl","resourceServer","customUrlValidation","allowedUrls","find","u","intercept","req","sendAccessToken","merge","token","catchError","take","mergeMap","clone","handle","OAuthResourceServerErrorHandler","OAuthModuleConfig","NullValidationHandler","createDefaultLogger","createDefaultStorage","OAuthModule","forRoot","validationHandlerClass","ngModule","OAuthModule_1","providers","provide","useFactory","useClass","useValue","HTTP_INTERCEPTORS","multi","NgModule","imports","CommonModule","declarations","exports","JwksValidationHandler","AUTH_CONFIG","InjectionToken"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\n\r\n/**\r\n * Additional options that can be passed to tryLogin.\r\n */\r\nexport class LoginOptions {\r\n  /**\r\n   * Is called, after a token has been received and\r\n   * successfully validated.\r\n   *\r\n   * Deprecated:  Use property ``events`` on OAuthService instead.\r\n   */\r\n  onTokenReceived?: (receivedTokens: ReceivedTokens) => void;\r\n\r\n  /**\r\n   * Hook, to validate the received tokens.\r\n   *\r\n   * Deprecated:  Use property ``tokenValidationHandler`` on OAuthService instead.\r\n   */\r\n  validationHandler?: (receivedTokens: ReceivedTokens) => Promise<any>;\r\n\r\n  /**\r\n   * Called when tryLogin detects that the auth server\r\n   * included an error message into the hash fragment.\r\n   *\r\n   * Deprecated:  Use property ``events`` on OAuthService instead.\r\n   */\r\n  onLoginError?: (params: object) => void;\r\n\r\n  /**\r\n   * A custom hash fragment to be used instead of the\r\n   * actual one. This is used for silent refreshes, to\r\n   * pass the iframes hash fragment to this method, and\r\n   * is also used by popup flows in the same manner.\r\n   * This can be used with code flow, where is must be set\r\n   * to a hash symbol followed by the querystring. The\r\n   * question mark is optional, but may be present following\r\n   * the hash symbol.\r\n   */\r\n  customHashFragment?: string;\r\n\r\n  /**\r\n   * Set this to true to disable the oauth2 state\r\n   * check which is a best practice to avoid\r\n   * security attacks.\r\n   * As OIDC defines a nonce check that includes\r\n   * this, this can be set to true when only doing\r\n   * OIDC.\r\n   */\r\n  disableOAuth2StateCheck?: boolean;\r\n\r\n  /**\r\n   * Normally, you want to clear your hash fragment after\r\n   * the lib read the token(s) so that they are not displayed\r\n   * anymore in the url. If not, set this to true. For code flow\r\n   * this controls removing query string values.\r\n   */\r\n  preventClearHashAfterLogin? = false;\r\n\r\n  /**\r\n   * Set this for code flow if you used a custom redirect Uri\r\n   * when retrieving the code. This is used internally for silent\r\n   * refresh and popup flows.\r\n   */\r\n  customRedirectUri?: string;\r\n}\r\n\r\n/**\r\n * Defines the logging interface the OAuthService uses\r\n * internally. Is compatible with the `console` object,\r\n * but you can provide your own implementation as well\r\n * through dependency injection.\r\n */\r\nexport abstract class OAuthLogger {\r\n  abstract debug(message?: any, ...optionalParams: any[]): void;\r\n  abstract info(message?: any, ...optionalParams: any[]): void;\r\n  abstract log(message?: any, ...optionalParams: any[]): void;\r\n  abstract warn(message?: any, ...optionalParams: any[]): void;\r\n  abstract error(message?: any, ...optionalParams: any[]): void;\r\n}\r\n\r\n/**\r\n * Defines a simple storage that can be used for\r\n * storing the tokens at client side.\r\n * Is compatible to localStorage and sessionStorage,\r\n * but you can also create your own implementations.\r\n */\r\nexport abstract class OAuthStorage {\r\n  abstract getItem(key: string): string | null;\r\n  abstract removeItem(key: string): void;\r\n  abstract setItem(key: string, data: string): void;\r\n}\r\n\r\n@Injectable()\r\nexport class MemoryStorage implements OAuthStorage {\r\n  private data = new Map<string, string>();\r\n\r\n  getItem(key: string): string {\r\n    return this.data.get(key);\r\n  }\r\n\r\n  removeItem(key: string): void {\r\n    this.data.delete(key);\r\n  }\r\n\r\n  setItem(key: string, data: string): void {\r\n    this.data.set(key, data);\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Represents the received tokens, the received state\r\n * and the parsed claims from the id-token.\r\n */\r\nexport class ReceivedTokens {\r\n  idToken: string;\r\n  accessToken: string;\r\n  idClaims?: object;\r\n  state?: string;\r\n}\r\n\r\n/**\r\n * Represents the parsed and validated id_token.\r\n */\r\nexport interface ParsedIdToken {\r\n  idToken: string;\r\n  idTokenClaims: object;\r\n  idTokenHeader: object;\r\n  idTokenClaimsJson: string;\r\n  idTokenHeaderJson: string;\r\n  idTokenExpiresAt: number;\r\n}\r\n\r\n/**\r\n * Represents the response from the token endpoint\r\n * http://openid.net/specs/openid-connect-core-1_0.html#TokenEndpoint\r\n */\r\nexport interface TokenResponse {\r\n  access_token: string;\r\n  id_token: string; \r\n  token_type: string;\r\n  expires_in: number;\r\n  refresh_token: string;\r\n  scope: string;\r\n  state?: string;\r\n}\r\n\r\n/**\r\n * Represents the response from the user info endpoint\r\n * http://openid.net/specs/openid-connect-core-1_0.html#UserInfo\r\n */\r\nexport interface UserInfo {\r\n  sub: string;\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n * Represents an OpenID Connect discovery document\r\n */\r\nexport interface OidcDiscoveryDoc {\r\n  issuer: string;\r\n  authorization_endpoint: string;\r\n  token_endpoint: string;\r\n  token_endpoint_auth_methods_supported: string[];\r\n  token_endpoint_auth_signing_alg_values_supported: string[];\r\n  userinfo_endpoint: string;\r\n  check_session_iframe: string;\r\n  end_session_endpoint: string;\r\n  jwks_uri: string;\r\n  registration_endpoint: string;\r\n  scopes_supported: string[];\r\n  response_types_supported: string[];\r\n  acr_values_supported: string[];\r\n  response_modes_supported: string[];\r\n  grant_types_supported: string[];\r\n  subject_types_supported: string[];\r\n  userinfo_signing_alg_values_supported: string[];\r\n  userinfo_encryption_alg_values_supported: string[];\r\n  userinfo_encryption_enc_values_supported: string[];\r\n  id_token_signing_alg_values_supported: string[];\r\n  id_token_encryption_alg_values_supported: string[];\r\n  id_token_encryption_enc_values_supported: string[];\r\n  request_object_signing_alg_values_supported: string[];\r\n  display_values_supported: string[];\r\n  claim_types_supported: string[];\r\n  claims_supported: string[];\r\n  claims_parameter_supported: boolean;\r\n  service_documentation: string;\r\n  ui_locales_supported: string[];\r\n}\r\n","// see: https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_.22Unicode_Problem.22\r\nexport function b64DecodeUnicode(str) {\r\n  const base64 = str.replace(/\\-/g, '+').replace(/\\_/g, '/');\r\n\r\n  return decodeURIComponent(\r\n    atob(base64)\r\n      .split('')\r\n      .map(function(c) {\r\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n      })\r\n      .join('')\r\n  );\r\n}\r\n\r\nexport function base64UrlEncode(str): string {\r\n  const base64 = btoa(str);\r\n  return base64\r\n    .replace(/\\+/g, '-')\r\n    .replace(/\\//g, '_')\r\n    .replace(/=/g, '');\r\n}","import { base64UrlEncode } from '../base64-helper';\r\n\r\nexport interface ValidationParams {\r\n  idToken: string;\r\n  accessToken: string;\r\n  idTokenHeader: object;\r\n  idTokenClaims: object;\r\n  jwks: object;\r\n  loadKeys: () => Promise<object>;\r\n}\r\n\r\n/**\r\n * Interface for Handlers that are hooked in to\r\n * validate tokens.\r\n */\r\nexport abstract class ValidationHandler {\r\n  /**\r\n   * Validates the signature of an id_token.\r\n   */\r\n  public abstract validateSignature(\r\n    validationParams: ValidationParams\r\n  ): Promise<any>;\r\n\r\n  /**\r\n   * Validates the at_hash in an id_token against the received access_token.\r\n   */\r\n  public abstract validateAtHash(validationParams: ValidationParams): Promise<boolean>;\r\n}\r\n\r\n/**\r\n * This abstract implementation of ValidationHandler already implements\r\n * the method validateAtHash. However, to make use of it,\r\n * you have to override the method calcHash.\r\n */\r\nexport abstract class AbstractValidationHandler implements ValidationHandler {\r\n  /**\r\n   * Validates the signature of an id_token.\r\n   */\r\n  abstract validateSignature(validationParams: ValidationParams): Promise<any>;\r\n\r\n  /**\r\n   * Validates the at_hash in an id_token against the received access_token.\r\n   */\r\n  async validateAtHash(params: ValidationParams): Promise<boolean> {\r\n    let hashAlg = this.inferHashAlgorithm(params.idTokenHeader);\r\n\r\n    let tokenHash = await this.calcHash(params.accessToken, hashAlg); // sha256(accessToken, { asString: true });\r\n\r\n    let leftMostHalf = tokenHash.substr(0, tokenHash.length / 2);\r\n\r\n    let atHash = base64UrlEncode(leftMostHalf);\r\n\r\n    let claimsAtHash = params.idTokenClaims['at_hash'].replace(/=/g, '');\r\n\r\n    if (atHash !== claimsAtHash) {\r\n      console.error('exptected at_hash: ' + atHash);\r\n      console.error('actual at_hash: ' + claimsAtHash);\r\n    }\r\n\r\n    return atHash === claimsAtHash;\r\n  }\r\n\r\n  /**\r\n   * Infers the name of the hash algorithm to use\r\n   * from the alg field of an id_token.\r\n   *\r\n   * @param jwtHeader the id_token's parsed header\r\n   */\r\n  protected inferHashAlgorithm(jwtHeader: object): string {\r\n    let alg: string = jwtHeader['alg'];\r\n\r\n    if (!alg.match(/^.S[0-9]{3}$/)) {\r\n      throw new Error('Algorithm not supported: ' + alg);\r\n    }\r\n\r\n    return 'sha-' + alg.substr(2);\r\n  }\r\n\r\n  /**\r\n   * Calculates the hash for the passed value by using\r\n   * the passed hash algorithm.\r\n   *\r\n   * @param valueToHash\r\n   * @param algorithm\r\n   */\r\n  protected abstract calcHash(valueToHash: string, algorithm: string): Promise<string>;\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class UrlHelperService {\r\n  public getHashFragmentParams(customHashFragment?: string): object {\r\n    let hash = customHashFragment || window.location.hash;\r\n\r\n    hash = decodeURIComponent(hash);\r\n\r\n    if (hash.indexOf('#') !== 0) {\r\n      return {};\r\n    }\r\n\r\n    const questionMarkPosition = hash.indexOf('?');\r\n\r\n    if (questionMarkPosition > -1) {\r\n      hash = hash.substr(questionMarkPosition + 1);\r\n    } else {\r\n      hash = hash.substr(1);\r\n    }\r\n\r\n    return this.parseQueryString(hash);\r\n  }\r\n\r\n  public parseQueryString(queryString: string): object {\r\n    const data = {};\r\n    let\r\n      pairs,\r\n      pair,\r\n      separatorIndex,\r\n      escapedKey,\r\n      escapedValue,\r\n      key,\r\n      value;\r\n\r\n    if (queryString === null) {\r\n      return data;\r\n    }\r\n\r\n    pairs = queryString.split('&');\r\n\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      pair = pairs[i];\r\n      separatorIndex = pair.indexOf('=');\r\n\r\n      if (separatorIndex === -1) {\r\n        escapedKey = pair;\r\n        escapedValue = null;\r\n      } else {\r\n        escapedKey = pair.substr(0, separatorIndex);\r\n        escapedValue = pair.substr(separatorIndex + 1);\r\n      }\r\n\r\n      key = decodeURIComponent(escapedKey);\r\n      value = decodeURIComponent(escapedValue);\r\n\r\n      if (key.substr(0, 1) === '/') { key = key.substr(1); }\r\n\r\n      data[key] = value;\r\n    }\r\n\r\n    return data;\r\n  }\r\n}\r\n","export type EventType =\r\n  | 'discovery_document_loaded'\r\n  | 'jwks_load_error'\r\n  | 'invalid_nonce_in_state'\r\n  | 'discovery_document_load_error'\r\n  | 'discovery_document_validation_error'\r\n  | 'user_profile_loaded'\r\n  | 'user_profile_load_error'\r\n  | 'token_received'\r\n  | 'token_error'\r\n  | 'code_error'\r\n  | 'token_refreshed'\r\n  | 'token_refresh_error'\r\n  | 'silent_refresh_error'\r\n  | 'silently_refreshed'\r\n  | 'silent_refresh_timeout'\r\n  | 'token_validation_error'\r\n  | 'token_expires'\r\n  | 'session_changed'\r\n  | 'session_error'\r\n  | 'session_terminated'\r\n  | 'logout'\r\n  | 'popup_closed'\r\n  | 'popup_blocked';\r\n\r\nexport abstract class OAuthEvent {\r\n  constructor(readonly type: EventType) {}\r\n}\r\n\r\nexport class OAuthSuccessEvent extends OAuthEvent {\r\n  constructor(type: EventType, readonly info: any = null) {\r\n    super(type);\r\n  }\r\n}\r\n\r\nexport class OAuthInfoEvent extends OAuthEvent {\r\n  constructor(type: EventType, readonly info: any = null) {\r\n    super(type);\r\n  }\r\n}\r\n\r\nexport class OAuthErrorEvent extends OAuthEvent {\r\n  constructor(\r\n    type: EventType,\r\n    readonly reason: object,\r\n    readonly params: object = null\r\n  ) {\r\n    super(type);\r\n  }\r\n}\r\n","export class AuthConfig {\r\n  /**\r\n   * The client's id as registered with the auth server\r\n   */\r\n  public clientId? = '';\r\n\r\n  /**\r\n   * The client's redirectUri as registered with the auth server\r\n   */\r\n  public redirectUri? = '';\r\n\r\n  /**\r\n   * An optional second redirectUri where the auth server\r\n   * redirects the user to after logging out.\r\n   */\r\n  public postLogoutRedirectUri? = '';\r\n\r\n  /**\r\n   * The auth server's endpoint that allows to log\r\n   * the user in when using implicit flow.\r\n   */\r\n  public loginUrl? = '';\r\n\r\n  /**\r\n   * The requested scopes\r\n   */\r\n  public scope? = 'openid profile';\r\n\r\n  public resource? = '';\r\n\r\n  public rngUrl? = '';\r\n\r\n  /**\r\n   * Defines whether to use OpenId Connect during\r\n   * implicit flow.\r\n   */\r\n  public oidc? = true;\r\n\r\n  /**\r\n   * Defines whether to request an access token during\r\n   * implicit flow.\r\n   */\r\n  public requestAccessToken? = true;\r\n\r\n  public options?: any = null;\r\n\r\n  /**\r\n   * The issuer's uri.\r\n   */\r\n  public issuer? = '';\r\n\r\n  /**\r\n   * The logout url.\r\n   */\r\n  public logoutUrl? = '';\r\n\r\n  /**\r\n   * Defines whether to clear the hash fragment after logging in.\r\n   */\r\n  public clearHashAfterLogin? = true;\r\n\r\n  /**\r\n   * Url of the token endpoint as defined by OpenId Connect and OAuth 2.\r\n   */\r\n  public tokenEndpoint?: string = null;\r\n\r\n  /**\r\n   * Url of the userinfo endpoint as defined by OpenId Connect.\r\n   */\r\n  public userinfoEndpoint?: string = null;\r\n\r\n  public responseType? = '';\r\n\r\n  /**\r\n   * Defines whether additional debug information should\r\n   * be shown at the console. Note that in certain browsers\r\n   * the verbosity of the console needs to be explicitly set\r\n   * to include Debug level messages.\r\n   */\r\n   public showDebugInformation? = false;\r\n\r\n  /**\r\n   * The redirect uri used when doing silent refresh.\r\n   */\r\n  public silentRefreshRedirectUri? = '';\r\n\r\n  public silentRefreshMessagePrefix? = '';\r\n\r\n  /**\r\n   * Set this to true to display the iframe used for\r\n   * silent refresh for debugging.\r\n   */\r\n  public silentRefreshShowIFrame? = false;\r\n\r\n  /**\r\n   * Timeout for silent refresh.\r\n   * @internal\r\n   * depreacted b/c of typo, see silentRefreshTimeout\r\n   */\r\n  public siletRefreshTimeout?: number = 1000 * 20;\r\n\r\n  /**\r\n   * Timeout for silent refresh.\r\n   */\r\n  public silentRefreshTimeout?: number = 1000 * 20;\r\n\r\n  /**\r\n   * Some auth servers don't allow using password flow\r\n   * w/o a client secret while the standards do not\r\n   * demand for it. In this case, you can set a password\r\n   * here. As this password is exposed to the public\r\n   * it does not bring additional security and is therefore\r\n   * as good as using no password.\r\n   */\r\n  public dummyClientSecret?: string = null;\r\n\r\n  /**\r\n   * Defines whether https is required.\r\n   * The default value is remoteOnly which only allows\r\n   * http for localhost, while every other domains need\r\n   * to be used with https.\r\n   */\r\n  public requireHttps?: boolean | 'remoteOnly' = 'remoteOnly';\r\n\r\n  /**\r\n   * Defines whether every url provided by the discovery\r\n   * document has to start with the issuer's url.\r\n   */\r\n  public strictDiscoveryDocumentValidation? = true;\r\n\r\n  /**\r\n   * JSON Web Key Set (https://tools.ietf.org/html/rfc7517)\r\n   * with keys used to validate received id_tokens.\r\n   * This is taken out of the disovery document. Can be set manually too.\r\n   */\r\n  public jwks?: object = null;\r\n\r\n  /**\r\n   * Map with additional query parameter that are appended to\r\n   * the request when initializing implicit flow.\r\n   */\r\n  public customQueryParams?: object = null;\r\n\r\n  public silentRefreshIFrameName? = 'angular-oauth-oidc-silent-refresh-iframe';\r\n\r\n  /**\r\n   * Defines when the token_timeout event should be raised.\r\n   * If you set this to the default value 0.75, the event\r\n   * is triggered after 75% of the token's life time.\r\n   */\r\n  public timeoutFactor? = 0.75;\r\n\r\n  /**\r\n   * If true, the lib will try to check whether the user\r\n   * is still logged in on a regular basis as described\r\n   * in http://openid.net/specs/openid-connect-session-1_0.html#ChangeNotification\r\n   */\r\n  public sessionChecksEnabled? = false;\r\n\r\n  /**\r\n   * Interval in msec for checking the session\r\n   * according to http://openid.net/specs/openid-connect-session-1_0.html#ChangeNotification\r\n   */\r\n  public sessionCheckIntervall? = 3 * 1000;\r\n\r\n  /**\r\n   * Url for the iframe used for session checks\r\n   */\r\n  public sessionCheckIFrameUrl?: string = null;\r\n\r\n  /**\r\n   * Name of the iframe to use for session checks\r\n   */\r\n  public sessionCheckIFrameName? = 'angular-oauth-oidc-check-session-iframe';\r\n\r\n  /**\r\n   * This property has been introduced to disable at_hash checks\r\n   * and is indented for Identity Provider that does not deliver\r\n   * an at_hash EVEN THOUGH its recommended by the OIDC specs.\r\n   * Of course, when disabling these checks the we are bypassing\r\n   * a security check which means we are more vulnerable.\r\n   */\r\n  public disableAtHashCheck? = false;\r\n\r\n  /**\r\n   * Defines wether to check the subject of a refreshed token after silent refresh.\r\n   * Normally, it should be the same as before.\r\n   */\r\n  public skipSubjectCheck? = false;\r\n\r\n  public useIdTokenHintForSilentRefresh? = false;\r\n\r\n  /**\r\n   * Defined whether to skip the validation of the issuer in the discovery document.\r\n   * Normally, the discovey document's url starts with the url of the issuer.\r\n   */\r\n  public skipIssuerCheck? = false;\r\n\r\n  /**\r\n   * According to rfc6749 it is recommended (but not required) that the auth\r\n   * server exposes the access_token's life time in seconds.\r\n   * This is a fallback value for the case this value is not exposed.\r\n   */\r\n  public fallbackAccessTokenExpirationTimeInSec?: number;\r\n\r\n  /**\r\n   * final state sent to issuer is built as follows:\r\n   * state = nonce + nonceStateSeparator + additional state\r\n   * Default separator is ';' (encoded %3B).\r\n   * In rare cases, this character might be forbidden or inconvenient to use by the issuer so it can be customized.\r\n   */\r\n  public nonceStateSeparator? = ';';\r\n\r\n  /**\r\n   * Set this to true to use HTTP BASIC auth for password flow\r\n   */\r\n  public useHttpBasicAuth? = false;\r\n\r\n  /**\r\n   * The window of time (in seconds) to allow the current time to deviate when validating id_token's iat and exp values.\r\n   */\r\n  public clockSkewInSec?: number;\r\n\r\n  /**\r\n   * The interceptors waits this time span if there is no token\r\n  */\r\n  public waitForTokenInMsec? = 0;\r\n\r\n  /**\r\n   * Code Flow is by defauld used together with PKCI which is also higly recommented.\r\n   * You can disbale it here by setting this flag to true.\r\n   * https://tools.ietf.org/html/rfc7636#section-1.1\r\n   */\r\n  public disablePKCE? = false;\r\n\r\n  constructor(json?: Partial<AuthConfig>) {\r\n    if (json) {\r\n      Object.assign(this, json);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This property allows you to override the method that is used to open the login url,\r\n   * allowing a way for implementations to specify their own method of routing to new\r\n   * urls.\r\n   */\r\n  public openUri?: ((uri: string) => void) = uri => {\r\n    location.href = uri;\r\n  }\r\n}\r\n","import { HttpParameterCodec } from '@angular/common/http';\r\n/**\r\n * This custom encoder allows charactes like +, % and / to be used in passwords\r\n */\r\nexport class WebHttpUrlEncodingCodec implements HttpParameterCodec {\r\n  encodeKey(k: string): string {\r\n    return encodeURIComponent(k);\r\n  }\r\n\r\n  encodeValue(v: string): string {\r\n    return encodeURIComponent(v);\r\n  }\r\n\r\n  decodeKey(k: string): string {\r\n    return decodeURIComponent(k);\r\n  }\r\n\r\n  decodeValue(v: string) {\r\n    return decodeURIComponent(v);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Abstraction for crypto algorithms\r\n*/\r\nexport abstract class HashHandler {\r\n    abstract calcHash(valueToHash: string, algorithm: string): Promise<string>;\r\n}\r\n\r\n@Injectable()\r\nexport class DefaultHashHandler implements HashHandler {\r\n\r\n    async calcHash(valueToHash: string, algorithm: string): Promise<string> {\r\n        const encoder = new TextEncoder();\r\n        const data = encoder.encode(valueToHash);\r\n        const hashArray = await window.crypto.subtle.digest(algorithm, data);\r\n        return this.toHashString(hashArray);\r\n    }\r\n\r\n    toHashString(buffer: ArrayBuffer) {\r\n      const byteArray = new Uint8Array(buffer);\r\n      let result = '';\r\n      for (let e of byteArray) {\r\n        result += String.fromCharCode(e);\r\n      }\r\n      return result;\r\n    }\r\n\r\n    // hexString(buffer) {\r\n    //     const byteArray = new Uint8Array(buffer);\r\n    //     const hexCodes = [...byteArray].map(value => {\r\n    //       const hexCode = value.toString(16);\r\n    //       const paddedHexCode = hexCode.padStart(2, '0');\r\n    //       return paddedHexCode;\r\n    //     });\r\n      \r\n    //     return hexCodes.join('');\r\n    //   }\r\n    \r\n      // toHashString(hexString: string) {\r\n      //   let result = '';\r\n      //   for (let i = 0; i < hexString.length; i += 2) {\r\n      //     let hexDigit = hexString.charAt(i) + hexString.charAt(i + 1);\r\n      //     let num = parseInt(hexDigit, 16);\r\n      //     result += String.fromCharCode(num);\r\n      //   }\r\n      //   return result;\r\n      // }\r\n\r\n}","import { Injectable, NgZone, Optional, OnDestroy } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Observable, Subject, Subscription, of, race, from } from 'rxjs';\r\nimport { filter, delay, first, tap, map, switchMap, debounceTime } from 'rxjs/operators';\r\n\r\nimport {\r\n    ValidationHandler,\r\n    ValidationParams\r\n} from './token-validation/validation-handler';\r\nimport { UrlHelperService } from './url-helper.service';\r\nimport {\r\n    OAuthEvent,\r\n    OAuthInfoEvent,\r\n    OAuthErrorEvent,\r\n    OAuthSuccessEvent\r\n} from './events';\r\nimport {\r\n    OAuthLogger,\r\n    OAuthStorage,\r\n    LoginOptions,\r\n    ParsedIdToken,\r\n    OidcDiscoveryDoc,\r\n    TokenResponse,\r\n    UserInfo\r\n} from './types';\r\nimport { b64DecodeUnicode, base64UrlEncode } from './base64-helper';\r\nimport { AuthConfig } from './auth.config';\r\nimport { WebHttpUrlEncodingCodec } from './encoder';\r\nimport { HashHandler } from './token-validation/hash-handler';\r\n\r\n/**\r\n * Service for logging in and logging out with\r\n * OIDC and OAuth2. Supports implicit flow and\r\n * password flow.\r\n */\r\n@Injectable()\r\nexport class OAuthService extends AuthConfig implements OnDestroy {\r\n    // Extending AuthConfig ist just for LEGACY reasons\r\n    // to not break existing code.\r\n\r\n    /**\r\n     * The ValidationHandler used to validate received\r\n     * id_tokens.\r\n     */\r\n    public tokenValidationHandler: ValidationHandler;\r\n\r\n    /**\r\n     * @internal\r\n     * Deprecated:  use property events instead\r\n     */\r\n    public discoveryDocumentLoaded = false;\r\n\r\n    /**\r\n     * @internal\r\n     * Deprecated:  use property events instead\r\n     */\r\n    public discoveryDocumentLoaded$: Observable<OidcDiscoveryDoc>;\r\n\r\n    /**\r\n     * Informs about events, like token_received or token_expires.\r\n     * See the string enum EventType for a full list of event types.\r\n     */\r\n    public events: Observable<OAuthEvent>;\r\n\r\n    /**\r\n     * The received (passed around) state, when logging\r\n     * in with implicit flow.\r\n     */\r\n    public state?= '';\r\n\r\n    protected eventsSubject: Subject<OAuthEvent> = new Subject<OAuthEvent>();\r\n    protected discoveryDocumentLoadedSubject: Subject<OidcDiscoveryDoc> = new Subject<OidcDiscoveryDoc>();\r\n    protected silentRefreshPostMessageEventListener: EventListener;\r\n    protected grantTypesSupported: Array<string> = [];\r\n    protected _storage: OAuthStorage;\r\n    protected accessTokenTimeoutSubscription: Subscription;\r\n    protected idTokenTimeoutSubscription: Subscription;\r\n    protected tokenReceivedSubscription: Subscription;\r\n    protected sessionCheckEventListener: EventListener;\r\n    protected jwksUri: string;\r\n    protected sessionCheckTimer: any;\r\n    protected silentRefreshSubject: string;\r\n    protected inImplicitFlow = false;\r\n\r\n    constructor(\r\n        protected ngZone: NgZone,\r\n        protected http: HttpClient,\r\n        @Optional() storage: OAuthStorage,\r\n        @Optional() tokenValidationHandler: ValidationHandler,\r\n        @Optional() protected config: AuthConfig,\r\n        protected urlHelper: UrlHelperService,\r\n        protected logger: OAuthLogger,\r\n        @Optional() protected crypto: HashHandler,\r\n    ) {\r\n        super();\r\n\r\n        this.debug('angular-oauth2-oidc v8-beta');\r\n\r\n        this.discoveryDocumentLoaded$ = this.discoveryDocumentLoadedSubject.asObservable();\r\n        this.events = this.eventsSubject.asObservable();\r\n\r\n        if (tokenValidationHandler) {\r\n            this.tokenValidationHandler = tokenValidationHandler;\r\n        }\r\n\r\n        if (config) {\r\n            this.configure(config);\r\n        }\r\n\r\n        try {\r\n            if (storage) {\r\n                this.setStorage(storage);\r\n            } else if (typeof sessionStorage !== 'undefined') {\r\n                this.setStorage(sessionStorage);\r\n            }\r\n        } catch (e) {\r\n\r\n            console.error(\r\n                'No OAuthStorage provided and cannot access default (sessionStorage).'\r\n                + 'Consider providing a custom OAuthStorage implementation in your module.',\r\n                e\r\n            );\r\n        }\r\n\r\n        this.setupRefreshTimer();\r\n    }\r\n\r\n    /**\r\n     * Use this method to configure the service\r\n     * @param config the configuration\r\n     */\r\n    public configure(config: AuthConfig): void {\r\n        // For the sake of downward compatibility with\r\n        // original configuration API\r\n        Object.assign(this, new AuthConfig(), config);\r\n\r\n        this.config = Object.assign({} as AuthConfig, new AuthConfig(), config);\r\n\r\n        if (this.sessionChecksEnabled) {\r\n            this.setupSessionCheck();\r\n        }\r\n\r\n        this.configChanged();\r\n    }\r\n\r\n    protected configChanged(): void {\r\n        this.setupRefreshTimer();\r\n    }\r\n\r\n    public restartSessionChecksIfStillLoggedIn(): void {\r\n        if (this.hasValidIdToken()) {\r\n            this.initSessionCheck();\r\n        }\r\n    }\r\n\r\n    protected restartRefreshTimerIfStillLoggedIn(): void {\r\n        this.setupExpirationTimers();\r\n    }\r\n\r\n    protected setupSessionCheck(): void {\r\n        this.events.pipe(filter(e => e.type === 'token_received')).subscribe(e => {\r\n            this.initSessionCheck();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Will setup up silent refreshing for when the token is\r\n     * about to expire. When the user is logged out via this.logOut method, the\r\n     * silent refreshing will pause and not refresh the tokens until the user is\r\n     * logged back in via receiving a new token.\r\n     * @param params Additional parameter to pass\r\n     * @param listenTo Setup automatic refresh of a specific token type\r\n     */\r\n    public setupAutomaticSilentRefresh(params: object = {}, listenTo?: 'access_token' | 'id_token' | 'any', noPrompt = true): void {\r\n        let shouldRunSilentRefresh = true;\r\n        this.events.pipe(\r\n            tap((e) => {\r\n                if (e.type === 'token_received') {\r\n                    shouldRunSilentRefresh = true;\r\n                } else if (e.type === 'logout') {\r\n                    shouldRunSilentRefresh = false;\r\n                }\r\n            }),\r\n            filter(e => e.type === 'token_expires'),\r\n            debounceTime(1000),\r\n        ).subscribe(e => {\r\n            const event = e as OAuthInfoEvent;\r\n            if ((listenTo == null || listenTo === 'any' || event.info === listenTo) && shouldRunSilentRefresh) {\r\n                // this.silentRefresh(params, noPrompt).catch(_ => {\r\n                this.refreshInternal(params, noPrompt).catch(_ => {\r\n                    this.debug('Automatic silent refresh did not work');\r\n                });\r\n            }\r\n        });\r\n\r\n        this.restartRefreshTimerIfStillLoggedIn();\r\n    }\r\n\r\n    protected refreshInternal(params, noPrompt): Promise<TokenResponse | OAuthEvent> {\r\n\r\n        if (!this.silentRefreshRedirectUri && this.responseType === 'code') {\r\n            return this.refreshToken();\r\n        } else {\r\n            return this.silentRefresh(params, noPrompt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convenience method that first calls `loadDiscoveryDocument(...)` and\r\n     * directly chains using the `then(...)` part of the promise to call\r\n     * the `tryLogin(...)` method.\r\n     *\r\n     * @param options LoginOptions to pass through to `tryLogin(...)`\r\n     */\r\n    public loadDiscoveryDocumentAndTryLogin(options: LoginOptions = null): Promise<boolean> {\r\n        return this.loadDiscoveryDocument().then(doc => {\r\n            return this.tryLogin(options);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Convenience method that first calls `loadDiscoveryDocumentAndTryLogin(...)`\r\n     * and if then chains to `initLoginFlow()`, but only if there is no valid\r\n     * IdToken or no valid AccessToken.\r\n     *\r\n     * @param options LoginOptions to pass through to `tryLogin(...)`\r\n     */\r\n    public loadDiscoveryDocumentAndLogin(options: LoginOptions & { state?: string } = null): Promise<boolean> {\r\n        if (!options) {\r\n            options = { state: '' };\r\n        }\r\n        return this.loadDiscoveryDocumentAndTryLogin(options).then(_ => {\r\n            if (!this.hasValidIdToken() || !this.hasValidAccessToken()) {\r\n                if (this.responseType === 'code') {\r\n                    this.initCodeFlow();\r\n                } else {\r\n                    this.initImplicitFlow();\r\n                }\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n    protected debug(...args): void {\r\n        if (this.showDebugInformation) {\r\n            this.logger.debug.apply(this.logger, args);\r\n        }\r\n    }\r\n\r\n    protected validateUrlFromDiscoveryDocument(url: string): string[] {\r\n        const errors: string[] = [];\r\n        const httpsCheck = this.validateUrlForHttps(url);\r\n        const issuerCheck = this.validateUrlAgainstIssuer(url);\r\n\r\n        if (!httpsCheck) {\r\n            errors.push(\r\n                'https for all urls required. Also for urls received by discovery.'\r\n            );\r\n        }\r\n\r\n        if (!issuerCheck) {\r\n            errors.push(\r\n                'Every url in discovery document has to start with the issuer url.' +\r\n                'Also see property strictDiscoveryDocumentValidation.'\r\n            );\r\n        }\r\n\r\n        return errors;\r\n    }\r\n\r\n    protected validateUrlForHttps(url: string): boolean {\r\n        if (!url) {\r\n            return true;\r\n        }\r\n\r\n        const lcUrl = url.toLowerCase();\r\n\r\n        if (this.requireHttps === false) {\r\n            return true;\r\n        }\r\n\r\n        if (\r\n            (lcUrl.match(/^http:\\/\\/localhost($|[:\\/])/) ||\r\n                lcUrl.match(/^http:\\/\\/localhost($|[:\\/])/)) &&\r\n            this.requireHttps === 'remoteOnly'\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        return lcUrl.startsWith('https://');\r\n    }\r\n\r\n    protected assertUrlNotNullAndCorrectProtocol(url: string | undefined, description: string) {\r\n        if (!url) {\r\n            throw new Error(`'${description}' should not be null`);\r\n        }\r\n        if (!this.validateUrlForHttps(url)) {\r\n            throw new Error(`'${description}' must use HTTPS (with TLS), or config value for property 'requireHttps' must be set to 'false' and allow HTTP (without TLS).`);\r\n        }\r\n    }\r\n\r\n    protected validateUrlAgainstIssuer(url: string) {\r\n        if (!this.strictDiscoveryDocumentValidation) {\r\n            return true;\r\n        }\r\n        if (!url) {\r\n            return true;\r\n        }\r\n        return url.toLowerCase().startsWith(this.issuer.toLowerCase());\r\n    }\r\n\r\n    protected setupRefreshTimer(): void {\r\n        if (typeof window === 'undefined') {\r\n            this.debug('timer not supported on this plattform');\r\n            return;\r\n        }\r\n\r\n        if (this.hasValidIdToken() || this.hasValidAccessToken()) {\r\n            this.clearAccessTokenTimer();\r\n            this.clearIdTokenTimer();\r\n            this.setupExpirationTimers();\r\n        }\r\n\r\n        if (this.tokenReceivedSubscription)\r\n            this.tokenReceivedSubscription.unsubscribe();\r\n\r\n        this.tokenReceivedSubscription = this.events.pipe(filter(e => e.type === 'token_received')).subscribe(_ => {\r\n            this.clearAccessTokenTimer();\r\n            this.clearIdTokenTimer();\r\n            this.setupExpirationTimers();\r\n        });\r\n    }\r\n\r\n    protected setupExpirationTimers(): void {\r\n        if (this.hasValidAccessToken()) {\r\n            this.setupAccessTokenTimer();\r\n        }\r\n\r\n\r\n        if (this.hasValidIdToken()) {\r\n            this.setupIdTokenTimer();\r\n        }\r\n    }\r\n\r\n    protected setupAccessTokenTimer(): void {\r\n\r\n        const expiration = this.getAccessTokenExpiration();\r\n        const storedAt = this.getAccessTokenStoredAt();\r\n        const timeout = this.calcTimeout(storedAt, expiration);\r\n\r\n        this.ngZone.runOutsideAngular(() => {\r\n            this.accessTokenTimeoutSubscription = of(\r\n                new OAuthInfoEvent('token_expires', 'access_token')\r\n            )\r\n                .pipe(delay(timeout))\r\n                .subscribe(e => {\r\n                    this.ngZone.run(() => {\r\n                        this.eventsSubject.next(e);\r\n                    });\r\n                });\r\n        });\r\n    }\r\n\r\n    protected setupIdTokenTimer(): void {\r\n\r\n        const expiration = this.getIdTokenExpiration();\r\n        const storedAt = this.getIdTokenStoredAt();\r\n        const timeout = this.calcTimeout(storedAt, expiration);\r\n\r\n        this.ngZone.runOutsideAngular(() => {\r\n            this.idTokenTimeoutSubscription = of(\r\n                new OAuthInfoEvent('token_expires', 'id_token')\r\n            )\r\n                .pipe(delay(timeout))\r\n                .subscribe(e => {\r\n                    this.ngZone.run(() => {\r\n                        this.eventsSubject.next(e);\r\n                    });\r\n                });\r\n        });\r\n    }\r\n\r\n    protected clearAccessTokenTimer(): void {\r\n        if (this.accessTokenTimeoutSubscription) {\r\n            this.accessTokenTimeoutSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    protected clearIdTokenTimer(): void {\r\n        if (this.idTokenTimeoutSubscription) {\r\n            this.idTokenTimeoutSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    protected calcTimeout(storedAt: number, expiration: number): number {\r\n        const now = Date.now();\r\n        const delta = (expiration - storedAt) * this.timeoutFactor - (now - storedAt);\r\n        return Math.max(0, delta);\r\n    }\r\n\r\n    /**\r\n     * DEPRECATED. Use a provider for OAuthStorage instead:\r\n     *\r\n     * { provide: OAuthStorage, useFactory: oAuthStorageFactory }\r\n     * export function oAuthStorageFactory(): OAuthStorage { return localStorage; }\r\n     * Sets a custom storage used to store the received\r\n     * tokens on client side. By default, the browser's\r\n     * sessionStorage is used.\r\n     * @ignore\r\n     *\r\n     * @param storage\r\n     */\r\n    public setStorage(storage: OAuthStorage): void {\r\n        this._storage = storage;\r\n        this.configChanged();\r\n    }\r\n\r\n    /**\r\n     * Loads the discovery document to configure most\r\n     * properties of this service. The url of the discovery\r\n     * document is infered from the issuer's url according\r\n     * to the OpenId Connect spec. To use another url you\r\n     * can pass it to to optional parameter fullUrl.\r\n     *\r\n     * @param fullUrl\r\n     */\r\n    public loadDiscoveryDocument(fullUrl: string = null): Promise<OAuthSuccessEvent> {\r\n        return new Promise((resolve, reject) => {\r\n            if (!fullUrl) {\r\n                fullUrl = this.issuer || '';\r\n                if (!fullUrl.endsWith('/')) {\r\n                    fullUrl += '/';\r\n                }\r\n                fullUrl += '.well-known/openid-configuration';\r\n            }\r\n\r\n            if (!this.validateUrlForHttps(fullUrl)) {\r\n                reject('issuer  must use HTTPS (with TLS), or config value for property \\'requireHttps\\' must be set to \\'false\\' and allow HTTP (without TLS).');\r\n                return;\r\n            }\r\n\r\n            this.http.get<OidcDiscoveryDoc>(fullUrl).subscribe(\r\n                doc => {\r\n                    if (!this.validateDiscoveryDocument(doc)) {\r\n                        this.eventsSubject.next(\r\n                            new OAuthErrorEvent('discovery_document_validation_error', null)\r\n                        );\r\n                        reject('discovery_document_validation_error');\r\n                        return;\r\n                    }\r\n\r\n                    this.loginUrl = doc.authorization_endpoint;\r\n                    this.logoutUrl = doc.end_session_endpoint || this.logoutUrl;\r\n                    this.grantTypesSupported = doc.grant_types_supported;\r\n                    this.issuer = doc.issuer;\r\n                    this.tokenEndpoint = doc.token_endpoint;\r\n                    this.userinfoEndpoint = doc.userinfo_endpoint || this.userinfoEndpoint;\r\n                    this.jwksUri = doc.jwks_uri;\r\n                    this.sessionCheckIFrameUrl = doc.check_session_iframe || this.sessionCheckIFrameUrl;\r\n\r\n                    this.discoveryDocumentLoaded = true;\r\n                    this.discoveryDocumentLoadedSubject.next(doc);\r\n\r\n                    if (this.sessionChecksEnabled) {\r\n                        this.restartSessionChecksIfStillLoggedIn();\r\n                    }\r\n\r\n                    this.loadJwks()\r\n                        .then(jwks => {\r\n                            const result: object = {\r\n                                discoveryDocument: doc,\r\n                                jwks: jwks\r\n                            };\r\n\r\n                            const event = new OAuthSuccessEvent(\r\n                                'discovery_document_loaded',\r\n                                result\r\n                            );\r\n                            this.eventsSubject.next(event);\r\n                            resolve(event);\r\n                            return;\r\n                        })\r\n                        .catch(err => {\r\n                            this.eventsSubject.next(\r\n                                new OAuthErrorEvent('discovery_document_load_error', err)\r\n                            );\r\n                            reject(err);\r\n                            return;\r\n                        });\r\n                },\r\n                err => {\r\n                    this.logger.error('error loading discovery document', err);\r\n                    this.eventsSubject.next(\r\n                        new OAuthErrorEvent('discovery_document_load_error', err)\r\n                    );\r\n                    reject(err);\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    protected loadJwks(): Promise<object> {\r\n        return new Promise<object>((resolve, reject) => {\r\n            if (this.jwksUri) {\r\n                this.http.get(this.jwksUri).subscribe(\r\n                    jwks => {\r\n                        this.jwks = jwks;\r\n                        this.eventsSubject.next(\r\n                            new OAuthSuccessEvent('discovery_document_loaded')\r\n                        );\r\n                        resolve(jwks);\r\n                    },\r\n                    err => {\r\n                        this.logger.error('error loading jwks', err);\r\n                        this.eventsSubject.next(\r\n                            new OAuthErrorEvent('jwks_load_error', err)\r\n                        );\r\n                        reject(err);\r\n                    }\r\n                );\r\n            } else {\r\n                resolve(null);\r\n            }\r\n        });\r\n    }\r\n\r\n    protected validateDiscoveryDocument(doc: OidcDiscoveryDoc): boolean {\r\n        let errors: string[];\r\n\r\n        if (!this.skipIssuerCheck && doc.issuer !== this.issuer) {\r\n            this.logger.error(\r\n                'invalid issuer in discovery document',\r\n                'expected: ' + this.issuer,\r\n                'current: ' + doc.issuer\r\n            );\r\n            return false;\r\n        }\r\n\r\n        errors = this.validateUrlFromDiscoveryDocument(doc.authorization_endpoint);\r\n        if (errors.length > 0) {\r\n            this.logger.error(\r\n                'error validating authorization_endpoint in discovery document',\r\n                errors\r\n            );\r\n            return false;\r\n        }\r\n\r\n        errors = this.validateUrlFromDiscoveryDocument(doc.end_session_endpoint);\r\n        if (errors.length > 0) {\r\n            this.logger.error(\r\n                'error validating end_session_endpoint in discovery document',\r\n                errors\r\n            );\r\n            return false;\r\n        }\r\n\r\n        errors = this.validateUrlFromDiscoveryDocument(doc.token_endpoint);\r\n        if (errors.length > 0) {\r\n            this.logger.error(\r\n                'error validating token_endpoint in discovery document',\r\n                errors\r\n            );\r\n        }\r\n\r\n        errors = this.validateUrlFromDiscoveryDocument(doc.userinfo_endpoint);\r\n        if (errors.length > 0) {\r\n            this.logger.error(\r\n                'error validating userinfo_endpoint in discovery document',\r\n                errors\r\n            );\r\n            return false;\r\n        }\r\n\r\n        errors = this.validateUrlFromDiscoveryDocument(doc.jwks_uri);\r\n        if (errors.length > 0) {\r\n            this.logger.error('error validating jwks_uri in discovery document', errors);\r\n            return false;\r\n        }\r\n\r\n        if (this.sessionChecksEnabled && !doc.check_session_iframe) {\r\n            this.logger.warn(\r\n                'sessionChecksEnabled is activated but discovery document' +\r\n                ' does not contain a check_session_iframe field'\r\n            );\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Uses password flow to exchange userName and password for an\r\n     * access_token. After receiving the access_token, this method\r\n     * uses it to query the userinfo endpoint in order to get information\r\n     * about the user in question.\r\n     *\r\n     * When using this, make sure that the property oidc is set to false.\r\n     * Otherwise stricter validations take place that make this operation\r\n     * fail.\r\n     *\r\n     * @param userName\r\n     * @param password\r\n     * @param headers Optional additional http-headers.\r\n     */\r\n    public fetchTokenUsingPasswordFlowAndLoadUserProfile(\r\n        userName: string,\r\n        password: string,\r\n        headers: HttpHeaders = new HttpHeaders()\r\n    ): Promise<UserInfo> {\r\n        return this.fetchTokenUsingPasswordFlow(userName, password, headers).then(\r\n            () => this.loadUserProfile()\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Loads the user profile by accessing the user info endpoint defined by OpenId Connect.\r\n     *\r\n     * When using this with OAuth2 password flow, make sure that the property oidc is set to false.\r\n     * Otherwise stricter validations take place that make this operation fail.\r\n     */\r\n    public loadUserProfile(): Promise<UserInfo> {\r\n        if (!this.hasValidAccessToken()) {\r\n            throw new Error('Can not load User Profile without access_token');\r\n        }\r\n        if (!this.validateUrlForHttps(this.userinfoEndpoint)) {\r\n            throw new Error('userinfoEndpoint must use HTTPS (with TLS), or config value for property \\'requireHttps\\' must be set to \\'false\\' and allow HTTP (without TLS).');\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const headers = new HttpHeaders().set(\r\n                'Authorization',\r\n                'Bearer ' + this.getAccessToken()\r\n            );\r\n\r\n            this.http.get<UserInfo>(this.userinfoEndpoint, { headers }).subscribe(\r\n                info => {\r\n                    this.debug('userinfo received', info);\r\n\r\n                    const existingClaims = this.getIdentityClaims() || {};\r\n\r\n                    if (!this.skipSubjectCheck) {\r\n                        if (\r\n                            this.oidc &&\r\n                            (!existingClaims['sub'] || info.sub !== existingClaims['sub'])\r\n                        ) {\r\n                            const err =\r\n                                'if property oidc is true, the received user-id (sub) has to be the user-id ' +\r\n                                'of the user that has logged in with oidc.\\n' +\r\n                                'if you are not using oidc but just oauth2 password flow set oidc to false';\r\n\r\n                            reject(err);\r\n                            return;\r\n                        }\r\n                    }\r\n\r\n                    info = Object.assign({}, existingClaims, info);\r\n\r\n                    this._storage.setItem('id_token_claims_obj', JSON.stringify(info));\r\n                    this.eventsSubject.next(new OAuthSuccessEvent('user_profile_loaded'));\r\n                    resolve(info);\r\n                },\r\n                err => {\r\n                    this.logger.error('error loading user info', err);\r\n                    this.eventsSubject.next(\r\n                        new OAuthErrorEvent('user_profile_load_error', err)\r\n                    );\r\n                    reject(err);\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Uses password flow to exchange userName and password for an access_token.\r\n     * @param userName\r\n     * @param password\r\n     * @param headers Optional additional http-headers.\r\n     */\r\n    public fetchTokenUsingPasswordFlow(\r\n        userName: string,\r\n        password: string,\r\n        headers: HttpHeaders = new HttpHeaders()\r\n\r\n    ): Promise<TokenResponse> {\r\n        this.assertUrlNotNullAndCorrectProtocol(this.tokenEndpoint, 'tokenEndpoint');\r\n\r\n        return new Promise((resolve, reject) => {\r\n            /**\r\n             * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to\r\n             * serialize and parse URL parameter keys and values.\r\n             *\r\n             * @stable\r\n             */\r\n            let params = new HttpParams({ encoder: new WebHttpUrlEncodingCodec() })\r\n                .set('grant_type', 'password')\r\n                .set('scope', this.scope)\r\n                .set('username', userName)\r\n                .set('password', password);\r\n\r\n            if (this.useHttpBasicAuth) {\r\n                const header = btoa(`${this.clientId}:${this.dummyClientSecret}`);\r\n                headers = headers.set(\r\n                    'Authorization',\r\n                    'Basic ' + header);\r\n            }\r\n\r\n            if (!this.useHttpBasicAuth) {\r\n                params = params.set('client_id', this.clientId);\r\n            }\r\n\r\n            if (!this.useHttpBasicAuth && this.dummyClientSecret) {\r\n                params = params.set('client_secret', this.dummyClientSecret);\r\n            }\r\n\r\n            if (this.customQueryParams) {\r\n                for (const key of Object.getOwnPropertyNames(this.customQueryParams)) {\r\n                    params = params.set(key, this.customQueryParams[key]);\r\n                }\r\n            }\r\n\r\n            headers = headers.set(\r\n                'Content-Type',\r\n                'application/x-www-form-urlencoded'\r\n            );\r\n\r\n            this.http\r\n                .post<TokenResponse>(this.tokenEndpoint, params, { headers })\r\n                .subscribe(\r\n                    tokenResponse => {\r\n                        this.debug('tokenResponse', tokenResponse);\r\n                        this.storeAccessTokenResponse(\r\n                            tokenResponse.access_token,\r\n                            tokenResponse.refresh_token,\r\n                            tokenResponse.expires_in,\r\n                            tokenResponse.scope\r\n                        );\r\n\r\n                        this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\r\n                        resolve(tokenResponse);\r\n                    },\r\n                    err => {\r\n                        this.logger.error('Error performing password flow', err);\r\n                        this.eventsSubject.next(new OAuthErrorEvent('token_error', err));\r\n                        reject(err);\r\n                    }\r\n                );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Refreshes the token using a refresh_token.\r\n     * This does not work for implicit flow, b/c\r\n     * there is no refresh_token in this flow.\r\n     * A solution for this is provided by the\r\n     * method silentRefresh.\r\n     */\r\n    public refreshToken(): Promise<TokenResponse> {\r\n        this.assertUrlNotNullAndCorrectProtocol(this.tokenEndpoint, 'tokenEndpoint');\r\n\r\n        return new Promise((resolve, reject) => {\r\n            let params = new HttpParams()\r\n                .set('grant_type', 'refresh_token')\r\n                .set('scope', this.scope)\r\n                .set('refresh_token', this._storage.getItem('refresh_token'));\r\n\r\n            let headers = new HttpHeaders().set(\r\n                'Content-Type',\r\n                'application/x-www-form-urlencoded'\r\n            );\r\n\r\n            if (this.useHttpBasicAuth) {\r\n                const header = btoa(`${this.clientId}:${this.dummyClientSecret}`);\r\n                headers = headers.set(\r\n                    'Authorization',\r\n                    'Basic ' + header);\r\n            }\r\n\r\n            if (!this.useHttpBasicAuth) {\r\n                params = params.set('client_id', this.clientId);\r\n            }\r\n\r\n            if (!this.useHttpBasicAuth && this.dummyClientSecret) {\r\n                params = params.set('client_secret', this.dummyClientSecret);\r\n            }\r\n\r\n            if (this.customQueryParams) {\r\n                for (const key of Object.getOwnPropertyNames(this.customQueryParams)) {\r\n                    params = params.set(key, this.customQueryParams[key]);\r\n                }\r\n            }\r\n\r\n            this.http\r\n                .post<TokenResponse>(this.tokenEndpoint, params, { headers })\r\n                .pipe(switchMap(tokenResponse => {\r\n                    if (tokenResponse.id_token) {\r\n                        return from(this.processIdToken(tokenResponse.id_token, tokenResponse.access_token, true))\r\n                            .pipe(\r\n                                tap(result => this.storeIdToken(result)),\r\n                                map(_ => tokenResponse)\r\n                            );\r\n                    } else {\r\n                        return of(tokenResponse);\r\n                    }\r\n                }))\r\n                .subscribe(\r\n                    tokenResponse => {\r\n                        this.debug('refresh tokenResponse', tokenResponse);\r\n                        this.storeAccessTokenResponse(\r\n                            tokenResponse.access_token,\r\n                            tokenResponse.refresh_token,\r\n                            tokenResponse.expires_in,\r\n                            tokenResponse.scope\r\n                        );\r\n\r\n                        this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\r\n                        this.eventsSubject.next(new OAuthSuccessEvent('token_refreshed'));\r\n                        resolve(tokenResponse);\r\n                    },\r\n                    err => {\r\n                        this.logger.error('Error refreshing token', err);\r\n                        this.eventsSubject.next(\r\n                            new OAuthErrorEvent('token_refresh_error', err)\r\n                        );\r\n                        reject(err);\r\n                    }\r\n                );\r\n        });\r\n    }\r\n\r\n    protected removeSilentRefreshEventListener(): void {\r\n        if (this.silentRefreshPostMessageEventListener) {\r\n            window.removeEventListener(\r\n                'message',\r\n                this.silentRefreshPostMessageEventListener\r\n            );\r\n            this.silentRefreshPostMessageEventListener = null;\r\n        }\r\n    }\r\n\r\n    protected setupSilentRefreshEventListener(): void {\r\n        this.removeSilentRefreshEventListener();\r\n\r\n        this.silentRefreshPostMessageEventListener = (e: MessageEvent) => {\r\n            const message = this.processMessageEventMessage(e);\r\n\r\n            this.tryLogin({\r\n                customHashFragment: message,\r\n                preventClearHashAfterLogin: true,\r\n                customRedirectUri: this.silentRefreshRedirectUri || this.redirectUri\r\n            }).catch(err => this.debug('tryLogin during silent refresh failed', err));\r\n        };\r\n\r\n        window.addEventListener(\r\n            'message',\r\n            this.silentRefreshPostMessageEventListener\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Performs a silent refresh for implicit flow.\r\n     * Use this method to get new tokens when/before\r\n     * the existing tokens expire.\r\n     */\r\n    public silentRefresh(params: object = {}, noPrompt = true): Promise<OAuthEvent> {\r\n        const claims: object = this.getIdentityClaims() || {};\r\n\r\n        if (this.useIdTokenHintForSilentRefresh && this.hasValidIdToken()) {\r\n            params['id_token_hint'] = this.getIdToken();\r\n        }\r\n\r\n        if (!this.validateUrlForHttps(this.loginUrl)) {\r\n            throw new Error('loginUrl  must use HTTPS (with TLS), or config value for property \\'requireHttps\\' must be set to \\'false\\' and allow HTTP (without TLS).');\r\n        }\r\n\r\n        if (typeof document === 'undefined') {\r\n            throw new Error('silent refresh is not supported on this platform');\r\n        }\r\n\r\n        const existingIframe = document.getElementById(\r\n            this.silentRefreshIFrameName\r\n        );\r\n\r\n        if (existingIframe) {\r\n            document.body.removeChild(existingIframe);\r\n        }\r\n\r\n        this.silentRefreshSubject = claims['sub'];\r\n\r\n        const iframe = document.createElement('iframe');\r\n        iframe.id = this.silentRefreshIFrameName;\r\n\r\n        this.setupSilentRefreshEventListener();\r\n\r\n        const redirectUri = this.silentRefreshRedirectUri || this.redirectUri;\r\n        this.createLoginUrl(null, null, redirectUri, noPrompt, params).then(url => {\r\n            iframe.setAttribute('src', url);\r\n\r\n            if (!this.silentRefreshShowIFrame) {\r\n                iframe.style['display'] = 'none';\r\n            }\r\n            document.body.appendChild(iframe);\r\n        });\r\n\r\n        const errors = this.events.pipe(\r\n            filter(e => e instanceof OAuthErrorEvent),\r\n            first()\r\n        );\r\n        const success = this.events.pipe(\r\n            filter(e => e.type === 'token_received'),\r\n            first()\r\n        );\r\n        const timeout = of(\r\n            new OAuthErrorEvent('silent_refresh_timeout', null)\r\n        ).pipe(delay(this.silentRefreshTimeout));\r\n\r\n        return race([errors, success, timeout])\r\n            .pipe(\r\n                map(e => {\r\n                    if (e instanceof OAuthErrorEvent) {\r\n                        if (e.type === 'silent_refresh_timeout') {\r\n                            this.eventsSubject.next(e);\r\n                        } else {\r\n                            e = new OAuthErrorEvent('silent_refresh_error', e);\r\n                            this.eventsSubject.next(e);\r\n                        }\r\n                        throw e;\r\n                    } else if (e.type === 'token_received') {\r\n                        e = new OAuthSuccessEvent('silently_refreshed');\r\n                        this.eventsSubject.next(e);\r\n                    }\r\n                    return e;\r\n                })\r\n            )\r\n            .toPromise();\r\n    }\r\n\r\n    /**\r\n     * This method exists for backwards compatibility.\r\n     * {@link OAuthService#initLoginFlowInPopup} handles both code\r\n     * and implicit flows.\r\n     */\r\n    public initImplicitFlowInPopup(options?: { height?: number, width?: number }) {\r\n        return this.initLoginFlowInPopup(options);\r\n    }\r\n\r\n    public initLoginFlowInPopup(options?: { height?: number, width?: number }) {\r\n        options = options || {};\r\n        return this.createLoginUrl(null, null, this.silentRefreshRedirectUri, false, {\r\n            display: 'popup'\r\n        }).then(url => {\r\n            return new Promise((resolve, reject) => {\r\n                /**\r\n                 * Error handling section\r\n                 */\r\n                const checkForPopupClosedInterval = 500;\r\n                let windowRef = window.open(url, '_blank', this.calculatePopupFeatures(options));\r\n                let checkForPopupClosedTimer: any;\r\n                const checkForPopupClosed = () => {\r\n                    if (!windowRef || windowRef.closed) {\r\n                        cleanup();\r\n                        reject(new OAuthErrorEvent('popup_closed', {}));\r\n                    }\r\n                };\r\n                if (!windowRef) {\r\n                    reject(new OAuthErrorEvent('popup_blocked', {}));\r\n                } else {\r\n                    checkForPopupClosedTimer = window.setInterval(checkForPopupClosed, checkForPopupClosedInterval);\r\n                }\r\n\r\n                const cleanup = () => {\r\n                    window.clearInterval(checkForPopupClosedTimer);\r\n                    window.removeEventListener('message', listener);\r\n                    if (windowRef !== null) {\r\n                        windowRef.close();\r\n                    }\r\n                    windowRef = null;\r\n                };\r\n\r\n                const listener = (e: MessageEvent) => {\r\n                    const message = this.processMessageEventMessage(e);\r\n\r\n                    if (message && message !== null) {\r\n                        this.tryLogin({\r\n                            customHashFragment: message,\r\n                            preventClearHashAfterLogin: true,\r\n                            customRedirectUri: this.silentRefreshRedirectUri,\r\n                        }).then(() => {\r\n                            cleanup();\r\n                            resolve();\r\n                        }, err => {\r\n                            cleanup();\r\n                            reject(err);\r\n                        });\r\n                    } else {\r\n                        console.log('false event firing');\r\n                    }\r\n\r\n                };\r\n\r\n                window.addEventListener('message', listener);\r\n            });\r\n        });\r\n    }\r\n\r\n    protected calculatePopupFeatures(options: { height?: number, width?: number }): string {\r\n        // Specify an static height and width and calculate centered position\r\n\r\n        const height = options.height || 470;\r\n        const width = options.width || 500;\r\n        const left = window.screenLeft + ((window.outerWidth - width) / 2);\r\n        const top = window.screenTop + ((window.outerHeight - height) / 2);\r\n        return `location=no,toolbar=no,width=${width},height=${height},top=${top},left=${left}`;\r\n    }\r\n\r\n    protected processMessageEventMessage(e: MessageEvent): string {\r\n        let expectedPrefix = '#';\r\n\r\n        if (this.silentRefreshMessagePrefix) {\r\n            expectedPrefix += this.silentRefreshMessagePrefix;\r\n        }\r\n\r\n        if (!e || !e.data || typeof e.data !== 'string') {\r\n            return;\r\n        }\r\n\r\n        const prefixedMessage: string = e.data;\r\n\r\n        if (!prefixedMessage.startsWith(expectedPrefix)) {\r\n            return;\r\n        }\r\n\r\n        return '#' + prefixedMessage.substr(expectedPrefix.length);\r\n    }\r\n\r\n    protected canPerformSessionCheck(): boolean {\r\n        if (!this.sessionChecksEnabled) {\r\n            return false;\r\n        }\r\n        if (!this.sessionCheckIFrameUrl) {\r\n            console.warn(\r\n                'sessionChecksEnabled is activated but there is no sessionCheckIFrameUrl'\r\n            );\r\n            return false;\r\n        }\r\n        const sessionState = this.getSessionState();\r\n        if (!sessionState) {\r\n            console.warn(\r\n                'sessionChecksEnabled is activated but there is no session_state'\r\n            );\r\n            return false;\r\n        }\r\n        if (typeof document === 'undefined') {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    protected setupSessionCheckEventListener(): void {\r\n        this.removeSessionCheckEventListener();\r\n\r\n        this.sessionCheckEventListener = (e: MessageEvent) => {\r\n            const origin = e.origin.toLowerCase();\r\n            const issuer = this.issuer.toLowerCase();\r\n\r\n            this.debug('sessionCheckEventListener');\r\n\r\n            if (!issuer.startsWith(origin)) {\r\n                this.debug(\r\n                    'sessionCheckEventListener',\r\n                    'wrong origin',\r\n                    origin,\r\n                    'expected',\r\n                    issuer\r\n                );\r\n\r\n                return;\r\n            }\r\n\r\n            // only run in Angular zone if it is 'changed' or 'error'\r\n            switch (e.data) {\r\n                case 'unchanged':\r\n                    this.handleSessionUnchanged();\r\n                    break;\r\n                case 'changed':\r\n                    this.ngZone.run(() => {\r\n                        this.handleSessionChange();\r\n                    });\r\n                    break;\r\n                case 'error':\r\n                    this.ngZone.run(() => {\r\n                        this.handleSessionError();\r\n                    });\r\n                    break;\r\n            }\r\n\r\n            this.debug('got info from session check inframe', e);\r\n        };\r\n\r\n        // prevent Angular from refreshing the view on every message (runs in intervals)\r\n        this.ngZone.runOutsideAngular(() => {\r\n            window.addEventListener('message', this.sessionCheckEventListener);\r\n        });\r\n    }\r\n\r\n    protected handleSessionUnchanged(): void {\r\n        this.debug('session check', 'session unchanged');\r\n    }\r\n\r\n    protected handleSessionChange(): void {\r\n        /* events: session_changed, relogin, stopTimer, logged_out*/\r\n        this.eventsSubject.next(new OAuthInfoEvent('session_changed'));\r\n        this.stopSessionCheckTimer();\r\n        if (this.silentRefreshRedirectUri) {\r\n            this.silentRefresh().catch(_ =>\r\n                this.debug('silent refresh failed after session changed')\r\n            );\r\n            this.waitForSilentRefreshAfterSessionChange();\r\n        } else {\r\n            this.eventsSubject.next(new OAuthInfoEvent('session_terminated'));\r\n            this.logOut(true);\r\n        }\r\n    }\r\n\r\n    protected waitForSilentRefreshAfterSessionChange(): void {\r\n        this.events\r\n            .pipe(\r\n                filter(\r\n                    (e: OAuthEvent) =>\r\n                        e.type === 'silently_refreshed' ||\r\n                        e.type === 'silent_refresh_timeout' ||\r\n                        e.type === 'silent_refresh_error'\r\n                ),\r\n                first()\r\n            )\r\n            .subscribe(e => {\r\n                if (e.type !== 'silently_refreshed') {\r\n                    this.debug('silent refresh did not work after session changed');\r\n                    this.eventsSubject.next(new OAuthInfoEvent('session_terminated'));\r\n                    this.logOut(true);\r\n                }\r\n            });\r\n    }\r\n\r\n    protected handleSessionError(): void {\r\n        this.stopSessionCheckTimer();\r\n        this.eventsSubject.next(new OAuthInfoEvent('session_error'));\r\n    }\r\n\r\n    protected removeSessionCheckEventListener(): void {\r\n        if (this.sessionCheckEventListener) {\r\n            window.removeEventListener('message', this.sessionCheckEventListener);\r\n            this.sessionCheckEventListener = null;\r\n        }\r\n    }\r\n\r\n    protected initSessionCheck(): void {\r\n        if (!this.canPerformSessionCheck()) {\r\n            return;\r\n        }\r\n\r\n        const existingIframe = document.getElementById(this.sessionCheckIFrameName);\r\n        if (existingIframe) {\r\n            document.body.removeChild(existingIframe);\r\n        }\r\n\r\n        const iframe = document.createElement('iframe');\r\n        iframe.id = this.sessionCheckIFrameName;\r\n\r\n        this.setupSessionCheckEventListener();\r\n\r\n        const url = this.sessionCheckIFrameUrl;\r\n        iframe.setAttribute('src', url);\r\n        iframe.style.display = 'none';\r\n        document.body.appendChild(iframe);\r\n\r\n        this.startSessionCheckTimer();\r\n    }\r\n\r\n    protected startSessionCheckTimer(): void {\r\n        this.stopSessionCheckTimer();\r\n        this.ngZone.runOutsideAngular(() => {\r\n            this.sessionCheckTimer = setInterval(\r\n                this.checkSession.bind(this),\r\n                this.sessionCheckIntervall\r\n            );\r\n        });\r\n    }\r\n\r\n    protected stopSessionCheckTimer(): void {\r\n        if (this.sessionCheckTimer) {\r\n            clearInterval(this.sessionCheckTimer);\r\n            this.sessionCheckTimer = null;\r\n        }\r\n    }\r\n\r\n    protected checkSession(): void {\r\n        const iframe: any = document.getElementById(this.sessionCheckIFrameName);\r\n\r\n        if (!iframe) {\r\n            this.logger.warn(\r\n                'checkSession did not find iframe',\r\n                this.sessionCheckIFrameName\r\n            );\r\n        }\r\n\r\n        const sessionState = this.getSessionState();\r\n\r\n        if (!sessionState) {\r\n            this.stopSessionCheckTimer();\r\n        }\r\n\r\n        const message = this.clientId + ' ' + sessionState;\r\n        iframe.contentWindow.postMessage(message, this.issuer);\r\n    }\r\n\r\n    protected async createLoginUrl(\r\n        state = '',\r\n        loginHint = '',\r\n        customRedirectUri = '',\r\n        noPrompt = false,\r\n        params: object = {}\r\n    ): Promise<string> {\r\n        const that = this;\r\n\r\n        let redirectUri: string;\r\n\r\n        if (customRedirectUri) {\r\n            redirectUri = customRedirectUri;\r\n        } else {\r\n            redirectUri = this.redirectUri;\r\n        }\r\n\r\n        const nonce = await this.createAndSaveNonce();\r\n\r\n        if (state) {\r\n            state = nonce + this.config.nonceStateSeparator + state;\r\n        } else {\r\n            state = nonce;\r\n        }\r\n\r\n        if (!this.requestAccessToken && !this.oidc) {\r\n            throw new Error(\r\n                'Either requestAccessToken or oidc or both must be true'\r\n            );\r\n        }\r\n\r\n        if (this.config.responseType) {\r\n            this.responseType = this.config.responseType;\r\n        } else {\r\n            if (this.oidc && this.requestAccessToken) {\r\n                this.responseType = 'id_token token';\r\n            } else if (this.oidc && !this.requestAccessToken) {\r\n                this.responseType = 'id_token';\r\n            } else {\r\n                this.responseType = 'token';\r\n            }\r\n        }\r\n\r\n        const seperationChar = that.loginUrl.indexOf('?') > -1 ? '&' : '?';\r\n\r\n        let scope = that.scope;\r\n\r\n        if (this.oidc && !scope.match(/(^|\\s)openid($|\\s)/)) {\r\n            scope = 'openid ' + scope;\r\n        }\r\n\r\n        let url =\r\n            that.loginUrl +\r\n            seperationChar +\r\n            'response_type=' +\r\n            encodeURIComponent(that.responseType) +\r\n            '&client_id=' +\r\n            encodeURIComponent(that.clientId) +\r\n            '&state=' +\r\n            encodeURIComponent(state) +\r\n            '&redirect_uri=' +\r\n            encodeURIComponent(redirectUri) +\r\n            '&scope=' +\r\n            encodeURIComponent(scope);\r\n\r\n        if (this.responseType === 'code' && !this.disablePKCE) {\r\n            const [challenge, verifier] = await this.createChallangeVerifierPairForPKCE();\r\n            this._storage.setItem('PKCI_verifier', verifier);\r\n            url += '&code_challenge=' + challenge;\r\n            url += '&code_challenge_method=S256';\r\n        }\r\n\r\n        if (loginHint) {\r\n            url += '&login_hint=' + encodeURIComponent(loginHint);\r\n        }\r\n\r\n        if (that.resource) {\r\n            url += '&resource=' + encodeURIComponent(that.resource);\r\n        }\r\n\r\n        if (that.oidc) {\r\n            url += '&nonce=' + encodeURIComponent(nonce);\r\n        }\r\n\r\n        if (noPrompt) {\r\n            url += '&prompt=none';\r\n        }\r\n\r\n        for (const key of Object.keys(params)) {\r\n            url +=\r\n                '&' + encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);\r\n        }\r\n\r\n        if (this.customQueryParams) {\r\n            for (const key of Object.getOwnPropertyNames(this.customQueryParams)) {\r\n                url +=\r\n                    '&' + key + '=' + encodeURIComponent(this.customQueryParams[key]);\r\n            }\r\n        }\r\n\r\n        return url;\r\n\r\n    }\r\n\r\n    initImplicitFlowInternal(\r\n        additionalState = '',\r\n        params: string | object = ''\r\n    ): void {\r\n        if (this.inImplicitFlow) {\r\n            return;\r\n        }\r\n\r\n        this.inImplicitFlow = true;\r\n\r\n        if (!this.validateUrlForHttps(this.loginUrl)) {\r\n            throw new Error(\r\n                'loginUrl  must use HTTPS (with TLS), or config value for property \\'requireHttps\\' must be set to \\'false\\' and allow HTTP (without TLS).'\r\n            );\r\n        }\r\n\r\n        let addParams: object = {};\r\n        let loginHint: string = null;\r\n\r\n        if (typeof params === 'string') {\r\n            loginHint = params;\r\n        } else if (typeof params === 'object') {\r\n            addParams = params;\r\n        }\r\n\r\n        this.createLoginUrl(additionalState, loginHint, null, false, addParams)\r\n            .then(this.config.openUri)\r\n            .catch(error => {\r\n                console.error('Error in initImplicitFlow', error);\r\n                this.inImplicitFlow = false;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Starts the implicit flow and redirects to user to\r\n     * the auth servers' login url.\r\n     *\r\n     * @param additionalState Optional state that is passed around.\r\n     *  You'll find this state in the property `state` after `tryLogin` logged in the user.\r\n     * @param params Hash with additional parameter. If it is a string, it is used for the\r\n     *               parameter loginHint (for the sake of compatibility with former versions)\r\n     */\r\n    public initImplicitFlow(\r\n        additionalState = '',\r\n        params: string | object = ''\r\n    ): void {\r\n        if (this.loginUrl !== '') {\r\n            this.initImplicitFlowInternal(additionalState, params);\r\n        } else {\r\n            this.events\r\n                .pipe(filter(e => e.type === 'discovery_document_loaded'))\r\n                .subscribe(_ => this.initImplicitFlowInternal(additionalState, params));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset current implicit flow\r\n     *\r\n     * @description This method allows resetting the current implict flow in order to be initialized again.\r\n     */\r\n    public resetImplicitFlow(): void {\r\n        this.inImplicitFlow = false;\r\n    }\r\n\r\n    protected callOnTokenReceivedIfExists(options: LoginOptions): void {\r\n        const that = this;\r\n        if (options.onTokenReceived) {\r\n            const tokenParams = {\r\n                idClaims: that.getIdentityClaims(),\r\n                idToken: that.getIdToken(),\r\n                accessToken: that.getAccessToken(),\r\n                state: that.state\r\n            };\r\n            options.onTokenReceived(tokenParams);\r\n        }\r\n    }\r\n\r\n    protected storeAccessTokenResponse(\r\n        accessToken: string,\r\n        refreshToken: string,\r\n        expiresIn: number,\r\n        grantedScopes: String\r\n    ): void {\r\n        this._storage.setItem('access_token', accessToken);\r\n        if (grantedScopes) {\r\n            this._storage.setItem('granted_scopes', JSON.stringify(grantedScopes.split('+')));\r\n        }\r\n        this._storage.setItem('access_token_stored_at', '' + Date.now());\r\n        if (expiresIn) {\r\n            const expiresInMilliSeconds = expiresIn * 1000;\r\n            const now = new Date();\r\n            const expiresAt = now.getTime() + expiresInMilliSeconds;\r\n            this._storage.setItem('expires_at', '' + expiresAt);\r\n        }\r\n\r\n        if (refreshToken) {\r\n            this._storage.setItem('refresh_token', refreshToken);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delegates to tryLoginImplicitFlow for the sake of competability\r\n     * @param options Optional options.\r\n     */\r\n    public tryLogin(options: LoginOptions = null): Promise<boolean> {\r\n        if (this.config.responseType === 'code') {\r\n            return this.tryLoginCodeFlow(options).then(_ => true);\r\n        }\r\n        else {\r\n            return this.tryLoginImplicitFlow(options);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private parseQueryString(queryString: string): object {\r\n        if (!queryString || queryString.length === 0) {\r\n            return {};\r\n        }\r\n\r\n        if (queryString.charAt(0) === '?') {\r\n            queryString = queryString.substr(1);\r\n        }\r\n\r\n        return this.urlHelper.parseQueryString(queryString);\r\n\r\n\r\n    }\r\n\r\n    public tryLoginCodeFlow(options: LoginOptions = null): Promise<void> {\r\n        options = options || {};\r\n\r\n        const querySource = options.customHashFragment ?\r\n            options.customHashFragment.substring(1) :\r\n            window.location.search;\r\n\r\n        const parts = this.getCodePartsFromUrl(window.location.search);\r\n\r\n        const code = parts['code'];\r\n        const state = parts['state'];\r\n\r\n        if (!options.preventClearHashAfterLogin) {\r\n            const href = location.href\r\n                .replace(/[&\\?]code=[^&\\$]*/, '')\r\n                .replace(/[&\\?]scope=[^&\\$]*/, '')\r\n                .replace(/[&\\?]state=[^&\\$]*/, '')\r\n                .replace(/[&\\?]session_state=[^&\\$]*/, '');\r\n\r\n            history.replaceState(null, window.name, href);\r\n        }\r\n\r\n        let [nonceInState, userState] = this.parseState(state);\r\n        this.state = userState;\r\n\r\n        if (parts['error']) {\r\n            this.debug('error trying to login');\r\n            this.handleLoginError({}, parts);\r\n            const err = new OAuthErrorEvent('code_error', {}, parts);\r\n            this.eventsSubject.next(err);\r\n            return Promise.reject(err);\r\n        }\r\n\r\n        if (!nonceInState) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const success = this.validateNonce(nonceInState);\r\n        if (!success) {\r\n            const event = new OAuthErrorEvent('invalid_nonce_in_state', null);\r\n            this.eventsSubject.next(event);\r\n            return Promise.reject(event);\r\n        }\r\n\r\n        if (code) {\r\n            return new Promise((resolve, reject) => {\r\n                this.getTokenFromCode(code, options).then(result => {\r\n                    resolve();\r\n                }).catch(err => {\r\n                    reject(err);\r\n                });\r\n            });\r\n        } else {\r\n            return Promise.resolve();\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Retrieve the returned auth code from the redirect uri that has been called.\r\n    * If required also check hash, as we could use hash location strategy.\r\n    */\r\n    private getCodePartsFromUrl(queryString: string): object {\r\n        if (!queryString || queryString.length === 0) {\r\n            return this.urlHelper.getHashFragmentParams();\r\n        }\r\n\r\n        // normalize query string\r\n        if (queryString.charAt(0) === '?') {\r\n            queryString = queryString.substr(1);\r\n        }\r\n\r\n        return this.urlHelper.parseQueryString(queryString);\r\n    }\r\n\r\n    /**\r\n     * Get token using an intermediate code. Works for the Authorization Code flow.\r\n     */\r\n    private getTokenFromCode(code: string, options: LoginOptions): Promise<object> {\r\n        let params = new HttpParams()\r\n            .set('grant_type', 'authorization_code')\r\n            .set('code', code)\r\n            .set('redirect_uri', options.customRedirectUri || this.redirectUri);\r\n\r\n        if (!this.disablePKCE) {\r\n            const pkciVerifier = this._storage.getItem('PKCI_verifier');\r\n\r\n            if (!pkciVerifier) {\r\n                console.warn('No PKCI verifier found in oauth storage!');\r\n            } else {\r\n                params = params.set('code_verifier', pkciVerifier);\r\n            }\r\n        }\r\n\r\n        return this.fetchAndProcessToken(params);\r\n    }\r\n\r\n    private fetchAndProcessToken(params: HttpParams): Promise<TokenResponse> {\r\n\r\n        this.assertUrlNotNullAndCorrectProtocol(this.tokenEndpoint, 'tokenEndpoint');\r\n        let headers = new HttpHeaders()\r\n            .set('Content-Type', 'application/x-www-form-urlencoded');\r\n\r\n        if (this.useHttpBasicAuth) {\r\n            const header = btoa(`${this.clientId}:${this.dummyClientSecret}`);\r\n            headers = headers.set(\r\n                'Authorization',\r\n                'Basic ' + header);\r\n        }\r\n\r\n        if (!this.useHttpBasicAuth) {\r\n            params = params.set('client_id', this.clientId);\r\n        }\r\n\r\n        if (!this.useHttpBasicAuth && this.dummyClientSecret) {\r\n            params = params.set('client_secret', this.dummyClientSecret);\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            if (this.customQueryParams) {\r\n                for (let key of Object.getOwnPropertyNames(this.customQueryParams)) {\r\n                    params = params.set(key, this.customQueryParams[key]);\r\n                }\r\n            }\r\n\r\n            this.http.post<TokenResponse>(this.tokenEndpoint, params, { headers }).subscribe(\r\n                (tokenResponse) => {\r\n                    this.debug('refresh tokenResponse', tokenResponse);\r\n                    this.storeAccessTokenResponse(\r\n                        tokenResponse.access_token,\r\n                        tokenResponse.refresh_token,\r\n                        tokenResponse.expires_in,\r\n                        tokenResponse.scope);\r\n\r\n                    if (this.oidc && tokenResponse.id_token) {\r\n                        this.processIdToken(tokenResponse.id_token, tokenResponse.access_token).\r\n                            then(result => {\r\n                                this.storeIdToken(result);\r\n\r\n                                this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\r\n                                this.eventsSubject.next(new OAuthSuccessEvent('token_refreshed'));\r\n\r\n                                resolve(tokenResponse);\r\n                            })\r\n                            .catch(reason => {\r\n                                this.eventsSubject.next(new OAuthErrorEvent('token_validation_error', reason));\r\n                                console.error('Error validating tokens');\r\n                                console.error(reason);\r\n\r\n                                reject(reason);\r\n                            });\r\n                    } else {\r\n                        this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\r\n                        this.eventsSubject.next(new OAuthSuccessEvent('token_refreshed'));\r\n\r\n                        resolve(tokenResponse);\r\n                    }\r\n                },\r\n                (err) => {\r\n                    console.error('Error getting token', err);\r\n                    this.eventsSubject.next(new OAuthErrorEvent('token_refresh_error', err));\r\n                    reject(err);\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks whether there are tokens in the hash fragment\r\n     * as a result of the implicit flow. These tokens are\r\n     * parsed, validated and used to sign the user in to the\r\n     * current client.\r\n     *\r\n     * @param options Optional options.\r\n     */\r\n    public tryLoginImplicitFlow(options: LoginOptions = null): Promise<boolean> {\r\n        options = options || {};\r\n\r\n        let parts: object;\r\n\r\n        if (options.customHashFragment) {\r\n            parts = this.urlHelper.getHashFragmentParams(options.customHashFragment);\r\n        } else {\r\n            parts = this.urlHelper.getHashFragmentParams();\r\n        }\r\n\r\n        this.debug('parsed url', parts);\r\n\r\n        const state = parts['state'];\r\n\r\n        let [nonceInState, userState] = this.parseState(state);\r\n        this.state = userState;\r\n\r\n        if (parts['error']) {\r\n            this.debug('error trying to login');\r\n            this.handleLoginError(options, parts);\r\n            const err = new OAuthErrorEvent('token_error', {}, parts);\r\n            this.eventsSubject.next(err);\r\n            return Promise.reject(err);\r\n        }\r\n\r\n        const accessToken = parts['access_token'];\r\n        const idToken = parts['id_token'];\r\n        const sessionState = parts['session_state'];\r\n        const grantedScopes = parts['scope'];\r\n\r\n        if (!this.requestAccessToken && !this.oidc) {\r\n            return Promise.reject(\r\n                'Either requestAccessToken or oidc (or both) must be true.'\r\n            );\r\n        }\r\n\r\n        if (this.requestAccessToken && !accessToken) {\r\n            return Promise.resolve(false);\r\n        }\r\n        if (this.requestAccessToken && !options.disableOAuth2StateCheck && !state) {\r\n            return Promise.resolve(false);\r\n        }\r\n        if (this.oidc && !idToken) {\r\n            return Promise.resolve(false);\r\n        }\r\n\r\n        if (this.sessionChecksEnabled && !sessionState) {\r\n            this.logger.warn(\r\n                'session checks (Session Status Change Notification) ' +\r\n                'were activated in the configuration but the id_token ' +\r\n                'does not contain a session_state claim'\r\n            );\r\n        }\r\n\r\n        if (this.requestAccessToken && !options.disableOAuth2StateCheck) {\r\n            const success = this.validateNonce(nonceInState);\r\n\r\n            if (!success) {\r\n                const event = new OAuthErrorEvent('invalid_nonce_in_state', null);\r\n                this.eventsSubject.next(event);\r\n                return Promise.reject(event);\r\n            }\r\n        }\r\n\r\n        if (this.requestAccessToken) {\r\n            this.storeAccessTokenResponse(\r\n                accessToken,\r\n                null,\r\n                parts['expires_in'] || this.fallbackAccessTokenExpirationTimeInSec,\r\n                grantedScopes\r\n            );\r\n        }\r\n\r\n        if (!this.oidc) {\r\n            this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\r\n            if (this.clearHashAfterLogin && !options.preventClearHashAfterLogin) {\r\n                location.hash = '';\r\n            }\r\n\r\n            this.callOnTokenReceivedIfExists(options);\r\n            return Promise.resolve(true);\r\n\r\n        }\r\n\r\n        return this.processIdToken(idToken, accessToken)\r\n            .then(result => {\r\n                if (options.validationHandler) {\r\n                    return options\r\n                        .validationHandler({\r\n                            accessToken: accessToken,\r\n                            idClaims: result.idTokenClaims,\r\n                            idToken: result.idToken,\r\n                            state: state\r\n                        })\r\n                        .then(_ => result);\r\n                }\r\n                return result;\r\n            })\r\n            .then(result => {\r\n                this.storeIdToken(result);\r\n                this.storeSessionState(sessionState);\r\n                if (this.clearHashAfterLogin && !options.preventClearHashAfterLogin) {\r\n                    location.hash = '';\r\n                }\r\n                this.eventsSubject.next(new OAuthSuccessEvent('token_received'));\r\n                this.callOnTokenReceivedIfExists(options);\r\n                this.inImplicitFlow = false;\r\n                return true;\r\n            })\r\n            .catch(reason => {\r\n                this.eventsSubject.next(\r\n                    new OAuthErrorEvent('token_validation_error', reason)\r\n                );\r\n                this.logger.error('Error validating tokens');\r\n                this.logger.error(reason);\r\n                return Promise.reject(reason);\r\n            });\r\n    }\r\n\r\n    private parseState(state: string): [string, string] {\r\n        let nonce = state;\r\n        let userState = '';\r\n\r\n        if (state) {\r\n            const idx = state.indexOf(this.config.nonceStateSeparator);\r\n            if (idx > -1) {\r\n                nonce = state.substr(0, idx);\r\n                userState = state.substr(idx + this.config.nonceStateSeparator.length);\r\n            }\r\n        }\r\n        return [nonce, userState];\r\n    }\r\n\r\n    protected validateNonce(\r\n        nonceInState: string\r\n    ): boolean {\r\n        const savedNonce = this._storage.getItem('nonce');\r\n        if (savedNonce !== nonceInState) {\r\n\r\n            const err = 'Validating access_token failed, wrong state/nonce.';\r\n            console.error(err, savedNonce, nonceInState);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    protected storeIdToken(idToken: ParsedIdToken): void {\r\n        this._storage.setItem('id_token', idToken.idToken);\r\n        this._storage.setItem('id_token_claims_obj', idToken.idTokenClaimsJson);\r\n        this._storage.setItem('id_token_expires_at', '' + idToken.idTokenExpiresAt);\r\n        this._storage.setItem('id_token_stored_at', '' + Date.now());\r\n    }\r\n\r\n    protected storeSessionState(sessionState: string): void {\r\n        this._storage.setItem('session_state', sessionState);\r\n    }\r\n\r\n    protected getSessionState(): string {\r\n        return this._storage.getItem('session_state');\r\n    }\r\n\r\n    protected handleLoginError(options: LoginOptions, parts: object): void {\r\n        if (options.onLoginError) {\r\n            options.onLoginError(parts);\r\n        }\r\n        if (this.clearHashAfterLogin && !options.preventClearHashAfterLogin) {\r\n            location.hash = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public processIdToken(\r\n        idToken: string,\r\n        accessToken: string,\r\n        skipNonceCheck = false\r\n    ): Promise<ParsedIdToken> {\r\n        const tokenParts = idToken.split('.');\r\n        const headerBase64 = this.padBase64(tokenParts[0]);\r\n        const headerJson = b64DecodeUnicode(headerBase64);\r\n        const header = JSON.parse(headerJson);\r\n        const claimsBase64 = this.padBase64(tokenParts[1]);\r\n        const claimsJson = b64DecodeUnicode(claimsBase64);\r\n        const claims = JSON.parse(claimsJson);\r\n        const savedNonce = this._storage.getItem('nonce');\r\n\r\n        if (Array.isArray(claims.aud)) {\r\n            if (claims.aud.every(v => v !== this.clientId)) {\r\n                const err = 'Wrong audience: ' + claims.aud.join(',');\r\n                this.logger.warn(err);\r\n                return Promise.reject(err);\r\n            }\r\n        } else {\r\n            if (claims.aud !== this.clientId) {\r\n                const err = 'Wrong audience: ' + claims.aud;\r\n                this.logger.warn(err);\r\n                return Promise.reject(err);\r\n            }\r\n        }\r\n\r\n        if (!claims.sub) {\r\n            const err = 'No sub claim in id_token';\r\n            this.logger.warn(err);\r\n            return Promise.reject(err);\r\n        }\r\n\r\n        /* For now, we only check whether the sub against\r\n         * silentRefreshSubject when sessionChecksEnabled is on\r\n         * We will reconsider in a later version to do this\r\n         * in every other case too.\r\n         */\r\n        if (\r\n            this.sessionChecksEnabled &&\r\n            this.silentRefreshSubject &&\r\n            this.silentRefreshSubject !== claims['sub']\r\n        ) {\r\n            const err =\r\n                'After refreshing, we got an id_token for another user (sub). ' +\r\n                `Expected sub: ${this.silentRefreshSubject}, received sub: ${\r\n                claims['sub']\r\n                }`;\r\n\r\n            this.logger.warn(err);\r\n            return Promise.reject(err);\r\n        }\r\n\r\n        if (!claims.iat) {\r\n            const err = 'No iat claim in id_token';\r\n            this.logger.warn(err);\r\n            return Promise.reject(err);\r\n        }\r\n\r\n        if (!this.skipIssuerCheck && claims.iss !== this.issuer) {\r\n            const err = 'Wrong issuer: ' + claims.iss;\r\n            this.logger.warn(err);\r\n            return Promise.reject(err);\r\n        }\r\n\r\n        if (!skipNonceCheck && claims.nonce !== savedNonce) {\r\n            const err = 'Wrong nonce: ' + claims.nonce;\r\n            this.logger.warn(err);\r\n            return Promise.reject(err);\r\n        }\r\n        // at_hash is not applicable to authorization code flow\r\n        // addressing https://github.com/manfredsteyer/angular-oauth2-oidc/issues/661\r\n        // i.e. Based on spec the at_hash check is only true for implicit code flow on Ping Federate\r\n        // https://www.pingidentity.com/developer/en/resources/openid-connect-developers-guide.html\r\n        if (this.hasOwnProperty('responseType') && this.responseType === 'code') {\r\n            this.disableAtHashCheck = true;\r\n        }\r\n        if (\r\n            !this.disableAtHashCheck &&\r\n            this.requestAccessToken &&\r\n            !claims['at_hash']\r\n        ) {\r\n            const err = 'An at_hash is needed!';\r\n            this.logger.warn(err);\r\n            return Promise.reject(err);\r\n        }\r\n\r\n        const now = Date.now();\r\n        const issuedAtMSec = claims.iat * 1000;\r\n        const expiresAtMSec = claims.exp * 1000;\r\n        const clockSkewInMSec = (this.clockSkewInSec || 600) * 1000;\r\n\r\n        if (\r\n            issuedAtMSec - clockSkewInMSec >= now ||\r\n            expiresAtMSec + clockSkewInMSec <= now\r\n        ) {\r\n            const err = 'Token has expired';\r\n            console.error(err);\r\n            console.error({\r\n                now: now,\r\n                issuedAtMSec: issuedAtMSec,\r\n                expiresAtMSec: expiresAtMSec\r\n            });\r\n            return Promise.reject(err);\r\n        }\r\n\r\n        const validationParams: ValidationParams = {\r\n            accessToken: accessToken,\r\n            idToken: idToken,\r\n            jwks: this.jwks,\r\n            idTokenClaims: claims,\r\n            idTokenHeader: header,\r\n            loadKeys: () => this.loadJwks()\r\n        };\r\n\r\n        if (this.disableAtHashCheck) {\r\n            return this.checkSignature(validationParams).then(_ => {\r\n                const result: ParsedIdToken = {\r\n                    idToken: idToken,\r\n                    idTokenClaims: claims,\r\n                    idTokenClaimsJson: claimsJson,\r\n                    idTokenHeader: header,\r\n                    idTokenHeaderJson: headerJson,\r\n                    idTokenExpiresAt: expiresAtMSec\r\n                };\r\n                return result;\r\n            });\r\n        }\r\n\r\n        return this.checkAtHash(validationParams)\r\n            .then(atHashValid => {\r\n                if (\r\n                    !this.disableAtHashCheck &&\r\n                    this.requestAccessToken &&\r\n                    !atHashValid\r\n                ) {\r\n                    const err = 'Wrong at_hash';\r\n                    this.logger.warn(err);\r\n                    return Promise.reject(err);\r\n                }\r\n\r\n                return this.checkSignature(validationParams).then(_ => {\r\n                    const atHashCheckEnabled = !this.disableAtHashCheck;\r\n                    const result: ParsedIdToken = {\r\n                        idToken: idToken,\r\n                        idTokenClaims: claims,\r\n                        idTokenClaimsJson: claimsJson,\r\n                        idTokenHeader: header,\r\n                        idTokenHeaderJson: headerJson,\r\n                        idTokenExpiresAt: expiresAtMSec\r\n                    };\r\n                    if (atHashCheckEnabled) {\r\n                        return this.checkAtHash(validationParams).then(atHashValid => {\r\n                            if (this.requestAccessToken && !atHashValid) {\r\n                                const err = 'Wrong at_hash';\r\n                                this.logger.warn(err);\r\n                                return Promise.reject(err);\r\n                            } else {\r\n                                return result;\r\n                            }\r\n                        });\r\n                    } else {\r\n                        return result;\r\n                    }\r\n                });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Returns the received claims about the user.\r\n     */\r\n    public getIdentityClaims(): object {\r\n        const claims = this._storage.getItem('id_token_claims_obj');\r\n        if (!claims) {\r\n            return null;\r\n        }\r\n        return JSON.parse(claims);\r\n    }\r\n\r\n    /**\r\n     * Returns the granted scopes from the server.\r\n     */\r\n    public getGrantedScopes(): object {\r\n        const scopes = this._storage.getItem('granted_scopes');\r\n        if (!scopes) {\r\n            return null;\r\n        }\r\n        return JSON.parse(scopes);\r\n    }\r\n\r\n    /**\r\n     * Returns the current id_token.\r\n     */\r\n    public getIdToken(): string {\r\n        return this._storage\r\n            ? this._storage.getItem('id_token')\r\n            : null;\r\n    }\r\n\r\n    protected padBase64(base64data): string {\r\n        while (base64data.length % 4 !== 0) {\r\n            base64data += '=';\r\n        }\r\n        return base64data;\r\n    }\r\n\r\n    /**\r\n     * Returns the current access_token.\r\n     */\r\n    public getAccessToken(): string {\r\n        return this._storage\r\n            ? this._storage.getItem('access_token')\r\n            : null;\r\n    }\r\n\r\n    public getRefreshToken(): string {\r\n        return this._storage\r\n            ? this._storage.getItem('refresh_token')\r\n            : null;\r\n    }\r\n\r\n    /**\r\n     * Returns the expiration date of the access_token\r\n     * as milliseconds since 1970.\r\n     */\r\n    public getAccessTokenExpiration(): number {\r\n        if (!this._storage.getItem('expires_at')) {\r\n            return null;\r\n        }\r\n        return parseInt(this._storage.getItem('expires_at'), 10);\r\n    }\r\n\r\n    protected getAccessTokenStoredAt(): number {\r\n        return parseInt(this._storage.getItem('access_token_stored_at'), 10);\r\n    }\r\n\r\n    protected getIdTokenStoredAt(): number {\r\n        return parseInt(this._storage.getItem('id_token_stored_at'), 10);\r\n    }\r\n\r\n    /**\r\n     * Returns the expiration date of the id_token\r\n     * as milliseconds since 1970.\r\n     */\r\n    public getIdTokenExpiration(): number {\r\n        if (!this._storage.getItem('id_token_expires_at')) {\r\n            return null;\r\n        }\r\n\r\n        return parseInt(this._storage.getItem('id_token_expires_at'), 10);\r\n    }\r\n\r\n    /**\r\n     * Checkes, whether there is a valid access_token.\r\n     */\r\n    public hasValidAccessToken(): boolean {\r\n        if (this.getAccessToken()) {\r\n            const expiresAt = this._storage.getItem('expires_at');\r\n            const now = new Date();\r\n            if (expiresAt && parseInt(expiresAt, 10) < now.getTime()) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks whether there is a valid id_token.\r\n     */\r\n    public hasValidIdToken(): boolean {\r\n        if (this.getIdToken()) {\r\n            const expiresAt = this._storage.getItem('id_token_expires_at');\r\n            const now = new Date();\r\n            if (expiresAt && parseInt(expiresAt, 10) < now.getTime()) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns the auth-header that can be used\r\n     * to transmit the access_token to a service\r\n     */\r\n    public authorizationHeader(): string {\r\n        return 'Bearer ' + this.getAccessToken();\r\n    }\r\n\r\n    /**\r\n     * Removes all tokens and logs the user out.\r\n     * If a logout url is configured, the user is\r\n     * redirected to it.\r\n     * @param noRedirectToLogoutUrl\r\n     */\r\n    public logOut(noRedirectToLogoutUrl = false): void {\r\n        const id_token = this.getIdToken();\r\n        this._storage.removeItem('access_token');\r\n        this._storage.removeItem('id_token');\r\n        this._storage.removeItem('refresh_token');\r\n        this._storage.removeItem('nonce');\r\n        this._storage.removeItem('expires_at');\r\n        this._storage.removeItem('id_token_claims_obj');\r\n        this._storage.removeItem('id_token_expires_at');\r\n        this._storage.removeItem('id_token_stored_at');\r\n        this._storage.removeItem('access_token_stored_at');\r\n        this._storage.removeItem('granted_scopes');\r\n        this._storage.removeItem('session_state');\r\n\r\n        this.silentRefreshSubject = null;\r\n\r\n        this.eventsSubject.next(new OAuthInfoEvent('logout'));\r\n\r\n        if (!this.logoutUrl) {\r\n            return;\r\n        }\r\n        if (noRedirectToLogoutUrl) {\r\n            return;\r\n        }\r\n\r\n        if (!id_token && !this.postLogoutRedirectUri) {\r\n            return;\r\n        }\r\n\r\n        let logoutUrl: string;\r\n\r\n        if (!this.validateUrlForHttps(this.logoutUrl)) {\r\n            throw new Error(\r\n                'logoutUrl  must use HTTPS (with TLS), or config value for property \\'requireHttps\\' must be set to \\'false\\' and allow HTTP (without TLS).'\r\n            );\r\n        }\r\n\r\n        // For backward compatibility\r\n        if (this.logoutUrl.indexOf('{{') > -1) {\r\n            logoutUrl = this.logoutUrl\r\n                .replace(/\\{\\{id_token\\}\\}/, id_token)\r\n                .replace(/\\{\\{client_id\\}\\}/, this.clientId);\r\n        } else {\r\n\r\n            let params = new HttpParams();\r\n\r\n            if (id_token) {\r\n                params = params.set('id_token_hint', id_token);\r\n            }\r\n\r\n            const postLogoutUrl = this.postLogoutRedirectUri || this.redirectUri;\r\n            if (postLogoutUrl) {\r\n                params = params.set('post_logout_redirect_uri', postLogoutUrl);\r\n            }\r\n\r\n            logoutUrl =\r\n                this.logoutUrl +\r\n                (this.logoutUrl.indexOf('?') > -1 ? '&' : '?') +\r\n                params.toString();\r\n        }\r\n        this.config.openUri(logoutUrl);\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public createAndSaveNonce(): Promise<string> {\r\n        const that = this;\r\n        return this.createNonce().then(function (nonce: any) {\r\n            that._storage.setItem('nonce', nonce);\r\n            return nonce;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @ignore\r\n     */\r\n    public ngOnDestroy(): void {\r\n        this.clearAccessTokenTimer();\r\n        this.clearIdTokenTimer();\r\n\r\n        this.removeSilentRefreshEventListener();\r\n        const silentRefreshFrame = document.getElementById(this.silentRefreshIFrameName);\r\n        if (silentRefreshFrame) {\r\n            silentRefreshFrame.remove();\r\n        }\r\n\r\n        this.stopSessionCheckTimer();\r\n        this.removeSessionCheckEventListener();\r\n        const sessionCheckFrame = document.getElementById(this.sessionCheckIFrameName);\r\n        if (sessionCheckFrame) {\r\n            sessionCheckFrame.remove();\r\n        }\r\n    }\r\n\r\n    protected createNonce(): Promise<string> {\r\n        return new Promise((resolve) => {\r\n            if (this.rngUrl) {\r\n                throw new Error(\r\n                    'createNonce with rng-web-api has not been implemented so far'\r\n                );\r\n            }\r\n\r\n            /*\r\n             * This alphabet is from:\r\n             * https://tools.ietf.org/html/rfc7636#section-4.1\r\n             *\r\n             * [A-Z] / [a-z] / [0-9] / \"-\" / \".\" / \"_\" / \"~\"\r\n             */\r\n            const unreserved = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~';\r\n            let size = 45;\r\n            let id = '';\r\n\r\n            const crypto = typeof self === 'undefined' ? null : (self.crypto || self['msCrypto']);\r\n            if (crypto) {\r\n                let bytes = new Uint8Array(size);\r\n                crypto.getRandomValues(bytes);\r\n                bytes = bytes.map(x => unreserved.charCodeAt(x % unreserved.length));\r\n                id = String.fromCharCode.apply(null, bytes);\r\n            } else {\r\n                while (0 < size--) {\r\n                    id += unreserved[Math.random() * unreserved.length | 0];\r\n                }\r\n            }\r\n\r\n            resolve(base64UrlEncode(id));\r\n        });\r\n    }\r\n\r\n    protected async checkAtHash(params: ValidationParams): Promise<boolean> {\r\n        if (!this.tokenValidationHandler) {\r\n            this.logger.warn(\r\n                'No tokenValidationHandler configured. Cannot check at_hash.'\r\n            );\r\n            return true;\r\n        }\r\n        return this.tokenValidationHandler.validateAtHash(params);\r\n    }\r\n\r\n    protected checkSignature(params: ValidationParams): Promise<any> {\r\n        if (!this.tokenValidationHandler) {\r\n            this.logger.warn(\r\n                'No tokenValidationHandler configured. Cannot check signature.'\r\n            );\r\n            return Promise.resolve(null);\r\n        }\r\n        return this.tokenValidationHandler.validateSignature(params);\r\n    }\r\n\r\n\r\n    /**\r\n     * Start the implicit flow or the code flow,\r\n     * depending on your configuration.\r\n     */\r\n    public initLoginFlow(\r\n        additionalState = '',\r\n        params = {}\r\n    ): void {\r\n        if (this.responseType === 'code') {\r\n            return this.initCodeFlow(additionalState, params);\r\n        } else {\r\n            return this.initImplicitFlow(additionalState, params);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts the authorization code flow and redirects to user to\r\n     * the auth servers login url.\r\n     */\r\n    public initCodeFlow(\r\n        additionalState = '',\r\n        params = {}\r\n    ): void {\r\n        if (this.loginUrl !== '') {\r\n            this.initCodeFlowInternal(additionalState, params);\r\n        } else {\r\n            this.events.pipe(filter(e => e.type === 'discovery_document_loaded'))\r\n                .subscribe(_ => this.initCodeFlowInternal(additionalState, params));\r\n        }\r\n    }\r\n\r\n    private initCodeFlowInternal(\r\n        additionalState = '',\r\n        params = {}\r\n    ): void {\r\n\r\n        if (!this.validateUrlForHttps(this.loginUrl)) {\r\n            throw new Error('loginUrl  must use HTTPS (with TLS), or config value for property \\'requireHttps\\' must be set to \\'false\\' and allow HTTP (without TLS).');\r\n        }\r\n\r\n        this.createLoginUrl(additionalState, '', null, false, params)\r\n            .then(this.config.openUri)\r\n            .catch(error => {\r\n                console.error('Error in initAuthorizationCodeFlow');\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    protected async createChallangeVerifierPairForPKCE(): Promise<[string, string]> {\r\n\r\n        if (!this.crypto) {\r\n            throw new Error('PKCI support for code flow needs a CryptoHander. Did you import the OAuthModule using forRoot() ?');\r\n        }\r\n\r\n\r\n        const verifier = await this.createNonce();\r\n        const challengeRaw = await this.crypto.calcHash(verifier, 'sha-256');\r\n        const challange = base64UrlEncode(challengeRaw);\r\n\r\n        return [challange, verifier];\r\n    }\r\n}\r\n","export abstract class OAuthModuleConfig {\r\n  resourceServer: OAuthResourceServerConfig;\r\n}\r\n\r\nexport abstract class OAuthResourceServerConfig {\r\n  /**\r\n   * Urls for which calls should be intercepted.\r\n   * If there is an ResourceServerErrorHandler registered, it is used for them.\r\n   * If sendAccessToken is set to true, the access_token is send to them too.\r\n   */\r\n  allowedUrls?: Array<string>;\r\n  sendAccessToken: boolean;\r\n  customUrlValidation?: (url: string) => boolean;\r\n}\r\n","import { HttpResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\n\r\nexport abstract class OAuthResourceServerErrorHandler {\r\n  abstract handleError(err: HttpResponse<any>): Observable<any>;\r\n}\r\n\r\nexport class OAuthNoopResourceServerErrorHandler\r\n  implements OAuthResourceServerErrorHandler {\r\n  handleError(err: HttpResponse<any>): Observable<any> {\r\n    return throwError(err);\r\n  }\r\n}\r\n","import { Injectable, Optional } from '@angular/core';\r\n\r\nimport {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\nimport { Observable, of, merge } from 'rxjs';\r\nimport { catchError, filter, map, take, mergeMap, timeout } from 'rxjs/operators';\r\nimport { OAuthResourceServerErrorHandler } from './resource-server-error-handler';\r\nimport { OAuthModuleConfig } from '../oauth-module.config';\r\nimport { OAuthStorage } from '../types';\r\nimport { OAuthService } from '../oauth-service';\r\n\r\n@Injectable()\r\nexport class DefaultOAuthInterceptor implements HttpInterceptor {\r\n\r\n    constructor(\r\n        private authStorage: OAuthStorage,\r\n        private oAuthService: OAuthService,\r\n        private errorHandler: OAuthResourceServerErrorHandler,\r\n        @Optional() private moduleConfig: OAuthModuleConfig\r\n    ) { }\r\n\r\n    private checkUrl(url: string): boolean {\r\n        if (this.moduleConfig.resourceServer.customUrlValidation) {\r\n            return this.moduleConfig.resourceServer.customUrlValidation(url);\r\n        }\r\n\r\n        if (this.moduleConfig.resourceServer.allowedUrls) {\r\n            return !!this.moduleConfig.resourceServer.allowedUrls.find(u => url.startsWith(u));\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n  public intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    const url = req.url.toLowerCase();\r\n\r\n\r\n    if (!this.moduleConfig || !this.moduleConfig.resourceServer || !this.checkUrl(url)) {\r\n      return next.handle(req);\r\n    }\r\n\r\n    const sendAccessToken = this.moduleConfig.resourceServer.sendAccessToken;\r\n\r\n    if (!sendAccessToken) {\r\n      return next\r\n        .handle(req)\r\n        .pipe(catchError(err => this.errorHandler.handleError(err)));\r\n    }\r\n\r\n    return merge(\r\n      of(this.oAuthService.getAccessToken()).pipe(\r\n        filter(token => token ? true : false),\r\n      ),\r\n      this.oAuthService.events.pipe(\r\n        filter(e => e.type === 'token_received'),\r\n        timeout(this.oAuthService.waitForTokenInMsec || 0),\r\n        catchError(_ => of(null)), // timeout is not an error\r\n        map(_ => this.oAuthService.getAccessToken()),\r\n      ),\r\n    ).pipe(\r\n      take(1),\r\n      mergeMap(token => {\r\n        if (token) {\r\n          const header = 'Bearer ' + token;\r\n          const headers = req.headers.set('Authorization', header);\r\n          req = req.clone({ headers });\r\n        }\r\n\r\n        return next\r\n          .handle(req)\r\n          .pipe(catchError(err => this.errorHandler.handleError(err)));\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { ValidationHandler, ValidationParams } from './validation-handler';\r\n\r\n/**\r\n * A validation handler that isn't validating nothing.\r\n * Can be used to skip validation (at your own risk).\r\n */\r\nexport class NullValidationHandler implements ValidationHandler {\r\n  validateSignature(validationParams: ValidationParams): Promise<any> {\r\n    return Promise.resolve(null);\r\n  }\r\n  validateAtHash(validationParams: ValidationParams): Promise<boolean> {\r\n    return Promise.resolve(true);\r\n  }\r\n}\r\n","import { MemoryStorage } from './types';\r\n\r\nexport function createDefaultLogger() {\r\n    return console;\r\n}\r\n\r\nexport function createDefaultStorage() {\r\n    return typeof sessionStorage !== 'undefined' ? sessionStorage : new MemoryStorage();\r\n}","import { OAuthStorage, OAuthLogger } from './types';\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\nimport { OAuthService } from './oauth-service';\r\nimport { UrlHelperService } from './url-helper.service';\r\n\r\nimport { OAuthModuleConfig } from './oauth-module.config';\r\nimport {\r\n  OAuthResourceServerErrorHandler,\r\n  OAuthNoopResourceServerErrorHandler\r\n} from './interceptors/resource-server-error-handler';\r\nimport { DefaultOAuthInterceptor } from './interceptors/default-oauth.interceptor';\r\nimport { ValidationHandler } from './token-validation/validation-handler';\r\nimport { NullValidationHandler } from './token-validation/null-validation-handler';\r\nimport { createDefaultLogger, createDefaultStorage } from './factories';\r\nimport { HashHandler, DefaultHashHandler } from './token-validation/hash-handler';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [],\r\n  exports: []\r\n})\r\nexport class OAuthModule {\r\n  static forRoot(\r\n    config: OAuthModuleConfig = null,\r\n    validationHandlerClass = NullValidationHandler\r\n  ): ModuleWithProviders<OAuthModule> {\r\n    return {\r\n      ngModule: OAuthModule,\r\n      providers: [\r\n        OAuthService,\r\n        UrlHelperService,\r\n        { provide: OAuthLogger, useFactory: createDefaultLogger },\r\n        { provide: OAuthStorage, useFactory: createDefaultStorage },\r\n        { provide: ValidationHandler, useClass: validationHandlerClass},\r\n        { provide: HashHandler, useClass: DefaultHashHandler },\r\n        {\r\n          provide: OAuthResourceServerErrorHandler,\r\n          useClass: OAuthNoopResourceServerErrorHandler\r\n        },\r\n        { provide: OAuthModuleConfig, useValue: config },\r\n        {\r\n          provide: HTTP_INTERCEPTORS,\r\n          useClass: DefaultOAuthInterceptor,\r\n          multi: true\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n","import { NullValidationHandler } from './null-validation-handler';\r\n\r\nconst err = `PLEASE READ THIS CAREFULLY:\r\n\r\nBeginning with angular-oauth2-oidc version 9, the JwksValidationHandler\r\nhas been moved to an library of its own. If you need it for implementing\r\nOAuth2/OIDC **implicit flow**, please install it using npm:\r\n\r\n  npm i angular-oauth2-oidc-jwks --save\r\n\r\nAfter that, you can import it into your application:\r\n\r\n  import { JwksValidationHandler } from 'angular-oauth2-oidc-jwks';\r\n\r\nPlease note, that this dependency is not needed for the **code flow**,\r\nwhich is nowadays the **recommented** one for single page applications.\r\nThis also results in smaller bundle sizes.\r\n`;\r\n\r\n/**\r\n * This is just a dummy of the JwksValidationHandler\r\n * telling the users that the real one has been moved\r\n * to an library of its own, namely angular-oauth2-oidc-utils\r\n */\r\nexport class JwksValidationHandler extends NullValidationHandler {\r\n\r\n  constructor() {\r\n    super();\r\n    console.error(err);\r\n  }\r\n\r\n}","import { InjectionToken } from '@angular/core';\r\nimport { AuthConfig } from './auth.config';\r\n\r\nexport const AUTH_CONFIG = new InjectionToken<AuthConfig>('AUTH_CONFIG');\r\n"]}